<?xml version="1.0" encoding="utf-8" standalone="yes" ?>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Istio Blog</title>
    <description>Connect, secure, control, and observe services.</description>
    
    <link></link>
    <image>
      <url>/favicons/android-192x192.png</url>
      <link></link>
    </image>
    <category>Service mesh</category>

    

    
      
        <item>
          <title>All Day Istio Twitch Stream</title>
          <description>

&lt;p&gt;To celebrate the 1.0 release and to promote the software to a wider audience, the Istio community is hosting an all day live stream on Twitch on August 17th.&lt;/p&gt;

&lt;h2 id=&#34;what-is-twitch&#34;&gt;What is Twitch?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitch.tv/&#34;&gt;Twitch&lt;/a&gt; is a popular video gaming live streaming platform and recently has seen a lot of coding content showing up. The IBM Advocates have been doing live coding and presentations there and it&amp;rsquo;s been fun. While mostly used for gaming content, there is a &lt;a href=&#34;https://www.twitch.tv/communities/programming&#34;&gt;growing community&lt;/a&gt; sharing and watching programming content on the site.&lt;/p&gt;

&lt;h2 id=&#34;what-does-this-have-to-do-with-istio&#34;&gt;What does this have to do with Istio?&lt;/h2&gt;

&lt;p&gt;The stream is going to be a full day of Istio content. Hopefully we&amp;rsquo;ll have a good mix of deep technical content, beginner content and line-of-business content for our audience. We&amp;rsquo;ll have developers, users, and evangelists on throughout the day to share their demos and stories. Expect live coding, q and a, and some surprises. We have stellar guests lined up from IBM, Google, Datadog, Pivotal, and more!&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-watch&#34;&gt;How do I watch?&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy! Just navigate &lt;a href=&#34;https://twitch.tv/ibmcode&#34;&gt;here&lt;/a&gt; on August 17th starting at 10 AM Pacific.&lt;/p&gt;

&lt;h2 id=&#34;schedule&#34;&gt;Schedule&lt;/h2&gt;

&lt;p&gt;All times are &lt;code&gt;PDT&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Speaker&lt;/th&gt;
&lt;th&gt;Affiliation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00 - 10:30&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Spencer Krum + Lisa-Marie Namphy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IBM / Portworx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10:30 - 11:00&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lin Sun / Spencer Krum / Sven Mawson&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IBM / Google&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11:00 - 11:10&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lin Sun / Spencer Krum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IBM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11:10 - 11:30&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Jason Yee / Ilan Rabinovich&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Datadog&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11:30 - 11:50&lt;/td&gt;
&lt;td&gt;&lt;code&gt;April Nassl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Google&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11:50 - 12:10&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Spike Curtis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tigera&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12:10 - 12:30&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shannon Coen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pivotal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12:30 - 1:00&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Matt Klein&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lyft&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1:00 - 1:20&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Zach Jory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;F5/Aspen Mesh&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1:20 - 1:40&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Dan Ciruli&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Google&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1:40 - 2:00&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Isaiah Snell-Feikema&lt;/code&gt; / &lt;code&gt;Greg Hanson&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IBM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2:00 - 2:20&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Zach Butcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tetrate&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2:20 - 2:40&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ray Hudaihed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;American Airlines&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2:40 - 3:00&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Christian Posta&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Red Hat&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3:00 - 3:20&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Google/IBM China&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Google / IBM&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3:20 - 3:40&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Colby Dyess&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tuffin&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3:40 - 4:00&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Rohit Agarwalla&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Cisco&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;i-d-like-to-be-on-the-stream&#34;&gt;I&amp;rsquo;d like to be on the stream&lt;/h2&gt;

&lt;p&gt;Oh good! We&amp;rsquo;d like to have you on as well. Reach out to &lt;code&gt;@nibalizer&lt;/code&gt; on the Istio slack or rocket chat to get started.&lt;/p&gt;
</description>
          <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/istio-twitch-stream/</link>
          <author>Spencer Krum, IBM</author>
          <guid isPermaLink="true">/en/blog/2018/istio-twitch-stream/</guid>

          
        </item>
      
    
      
        <item>
          <title>Announcing Istio 1.0</title>
          <description>

&lt;p&gt;Today, we’re excited to announce &lt;a href=&#34;/about/notes/1.0&#34;&gt;Istio 1.0&lt;/a&gt;. It’s been a little over a year since our initial 0.1 release. Since then, Istio has evolved significantly with the help of a thriving and growing community of contributors and users. We’ve now reached the point where many companies have successfully adopted Istio in production and have gotten real value from the insight and control it provides over their deployments. We’ve helped large enterprises and fast-moving startups like &lt;a href=&#34;https://www.ebay.com/&#34;&gt;eBay&lt;/a&gt;, &lt;a href=&#34;https://www.autotrader.co.uk/&#34;&gt;Auto Trader UK&lt;/a&gt;, &lt;a href=&#34;http://www.descarteslabs.com/&#34;&gt;Descartes Labs&lt;/a&gt;, &lt;a href=&#34;https://www.fitstation.com/&#34;&gt;HP FitStation&lt;/a&gt;, &lt;a href=&#34;https://juspay.in&#34;&gt;JUSPAY&lt;/a&gt;, &lt;a href=&#34;https://www.namely.com/&#34;&gt;Namely&lt;/a&gt;, &lt;a href=&#34;https://www.pubnub.com/&#34;&gt;PubNub&lt;/a&gt; and &lt;a href=&#34;https://www.trulia.com/&#34;&gt;Trulia&lt;/a&gt; use Istio to connect, manage and secure their services from the ground up. Shipping this release as 1.0 is recognition that we’ve built a core set of functionality that our users can rely on for production use.&lt;/p&gt;

&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;

&lt;p&gt;We’ve seen substantial growth in Istio&amp;rsquo;s ecosystem in the last year. &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; continues its impressive growth and added numerous
features that are crucial for a production quality service mesh. Observability providers like &lt;a href=&#34;https://www.datadoghq.com/&#34;&gt;Datadog&lt;/a&gt;,
&lt;a href=&#34;https://www.solarwinds.com/&#34;&gt;SolarWinds&lt;/a&gt;, &lt;a href=&#34;https://sysdig.com/blog/monitor-istio/&#34;&gt;Sysdig&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/stackdriver/&#34;&gt;Google Stackdriver&lt;/a&gt; and
&lt;a href=&#34;https://aws.amazon.com/cloudwatch/&#34;&gt;Amazon CloudWatch&lt;/a&gt; have written plugins to integrate Istio with their products.
&lt;a href=&#34;https://www.tigera.io/resources/using-network-policy-concert-istio-2/&#34;&gt;Tigera&lt;/a&gt;, &lt;a href=&#34;https://www.aporeto.com/&#34;&gt;Aporeto&lt;/a&gt;, &lt;a href=&#34;https://cilium.io/&#34;&gt;Cilium&lt;/a&gt;
and &lt;a href=&#34;https://styra.com/&#34;&gt;Styra&lt;/a&gt; built extensions to our policy enforcement and networking capabilities. &lt;a href=&#34;https://www.redhat.com/en&#34;&gt;Red Hat&lt;/a&gt; built &lt;a href=&#34;https://www.kiali.io&#34;&gt;Kiali&lt;/a&gt; to wrap a nice user-experience around mesh management and observability. &lt;a href=&#34;https://www.cloudfoundry.org/&#34;&gt;Cloud Foundry&lt;/a&gt; is building on  Istio for it’s next generation traffic routing stack, the recently announced &lt;a href=&#34;https://github.com/knative/docs&#34;&gt;Knative&lt;/a&gt; serverless project is doing the same and &lt;a href=&#34;https://apigee.com/&#34;&gt;Apigee&lt;/a&gt; announced that they plan to use it in their API management solution. These are just some of the integrations the community has added in the last year.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;Since the 0.8 release we’ve added some important new features and more importantly marked many of our existing features as Beta signaling that they’re ready for production use. This is captured in more detail in the &lt;a href=&#34;/about/notes/1.0/&#34;&gt;release notes&lt;/a&gt;  but it’s worth calling out some highlights&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Multiple Kubernetes clusters can now be &lt;a href=&#34;/docs/setup/kubernetes/multicluster-install&#34;&gt;added to a single mesh&lt;/a&gt; and enabling cross-cluster communication and consistent policy enforcement. Multi-cluster support is now Beta.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Networking APIs that enable fine grained control over the flow of traffic through a mesh are now Beta. Explicitly modeling ingress and egress concerns using Gateways allows operators to &lt;a href=&#34;/blog/2018/v1alpha3-routing/&#34;&gt;control the network topology&lt;/a&gt; and meet access security requirements at the edge.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mutual TLS can now be &lt;a href=&#34;/docs/tasks/security/mtls-migration&#34;&gt;rolled out incrementally&lt;/a&gt; without requiring all clients of a service to be updated. This is a critical feature that unblocks adoption in-place by existing production deployments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mixer now has support for &lt;a href=&#34;https://github.com/istio/istio/wiki/Out-Of-Process-gRPC-Adapter-Dev-Guide&#34;&gt;developing out-of-process adapters&lt;/a&gt;. This will become the default way to extend Mixer over the coming releases and makes building adapters much simpler.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/docs/concepts/security/#authorization&#34;&gt;Authorization policies&lt;/a&gt; which control access to services are now entirely evaluated locally in Envoy increasing
their performance and reliability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/docs/setup/kubernetes/helm-install/&#34;&gt;Helm chart installation&lt;/a&gt; is now the recommended install method offering rich customization options to adopt Istio on your terms.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We’ve put a lot of effort into performance including continuous regression testing, large scale environment simulation and targeted fixes. We’re very happy with the results and will share more on this in detail in the coming weeks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;While this is a significant milestone for the project there’s lots more to do. In working with adopters we’ve gotten a lot of great feedback about what to focus next. We’ve heard consistent themes around support for hybrid-cloud, install modularity, richer networking features and scalability for massive deployments. We’ve already taken some of this feedback into account in the 1.0 release and we’ll continue to aggressively tackle this work in the coming months.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;If you’re new to Istio and looking to use it for your deployment we’d love to hear from you. Take a look at &lt;a href=&#34;/docs/&#34;&gt;our docs&lt;/a&gt;, stop by our
&lt;a href=&#34;https://istio.rocket.chat&#34;&gt;chat forum&lt;/a&gt; or reach out on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/istio-dev&#34;&gt;mailing list&lt;/a&gt;. If you’d like
to go deeper and &lt;a href=&#34;/about/community&#34;&gt;contribute to the project&lt;/a&gt; come to one of our community meetings and say hello.&lt;/p&gt;

&lt;h2 id=&#34;finally&#34;&gt;Finally&lt;/h2&gt;

&lt;p&gt;The Istio team would like to give huge thanks to everyone who has made a contribution to the project. It wouldn’t be where it is today without your help. The last year has been pretty amazing and we look forward to the next one with excitement about what we can achieve together as a community.&lt;/p&gt;
</description>
          <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/announcing-1.0/</link>
          <author>The Istio Team</author>
          <guid isPermaLink="true">/en/blog/2018/announcing-1.0/</guid>

          
        </item>
      
    
      
        <item>
          <title>Istio a Game Changer for HP&#39;s FitStation Platform</title>
          <description>&lt;p&gt;The FitStation team at HP strongly believes in the future of Kubernetes, BPF and service-mesh as the next standards in cloud infrastructure. We are also very happy to see Istio coming to its official Istio 1.0 release &amp;ndash; thanks to the joint collaboration that started at Google, IBM and Lyft beginning in May 2017.&lt;/p&gt;

&lt;p&gt;Throughout the development of FitStation’s large scale and progressive cloud platform, Istio, Cilium and Kubernetes technologies have delivered a multitude of opportunities to make our systems more robust and scalable. Istio was a game changer in creating reliable and dynamic network communication.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fitstation.com&#34;&gt;FitStation powered by HP&lt;/a&gt; is a technology platform that captures 3D biometric data to design personalized footwear to perfectly fit individual foot size and shape as well as gait profile. It uses 3D scanning, pressure sensing, 3D printing and variable density injection molding to create unique footwear. Footwear brands such as Brooks, Steitz Secura or Superfeet are connecting to FitStation to build their next generation of high performance sports, professional and medical shoes.&lt;/p&gt;

&lt;p&gt;FitStation is built on the promise of ultimate security and privacy for users&amp;rsquo; biometric data. ISTIO is the cornerstone to make that possible for data-at-flight within our cloud. By managing these aspects at the infrastructure level, we focused on solving business problems instead of spending time on individual implementations of secure service communication. Using Istio allowed us to dramatically reduce the complexity of maintaining a multitude of libraries and services to provide secure service communication.&lt;/p&gt;

&lt;p&gt;As a bonus benefit of Istio 1.0, we gained network visibility, metrics and tracing out of the box. This radically improved decision-making and response quality for our development
and devops teams. The team got in-depth insight in the network communication across the entire platform, both for new as well as legacy applications. The integration of Cilium
with Envoy delivered a remarkable performance benefit on Istio service mesh communication, combined with a fine-grained kernel driven L7 network security layer. This was due to the powers of BPF brought to Istio by Cilium. We believe this will drive the future of Linux kernel security.&lt;/p&gt;

&lt;p&gt;It has been very exciting to follow Istio’s growth. We have been able to see clear improvements of performance and stability over the different development versions. The improvements between version 0.7 and 0.8 made our teams feel comfortable with version 1.0, we can state that Istio is now ready for real production usage.&lt;/p&gt;

&lt;p&gt;We are looking forward to the promising roadmaps of Istio, Envoy, Cilium and CNCF.&lt;/p&gt;
</description>
          <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/hp/</link>
          <author>Steven Ceuppens, Chief Software Architect @ HP FitStation, Open Source Advocate / Contributor</author>
          <guid isPermaLink="true">/en/blog/2018/hp/</guid>

          
        </item>
      
    
      
        <item>
          <title>Delayering Istio with AppSwitch</title>
          <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All problems in computer science can be solved with another layer, except of course the problem of too many layers.&lt;/em&gt; &amp;ndash; David Wheeler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sidecar proxy approach enables a lot of awesomeness.  Squarely in the datapath between microservices, the sidecar can precisely tell what the application is trying to do.  It can monitor and instrument protocol traffic, not in the bowels of the networking layers but at the application level, to enable deep visibility, access controls and traffic management.&lt;/p&gt;

&lt;p&gt;If we look closely however, there are many intermediate layers that the data has to pass through before the high-value analysis of application-traffic can be performed.  Most of those layers are part of the base plumbing infrastructure that are there just to push the data along.  In doing so, they add latency to communication and complexity to the overall system.&lt;/p&gt;

&lt;p&gt;Over the years, there has been much collective effort in implementing aggressive fine-grained optimizations within the layers of the network datapath.  Each iteration may shave another few microseconds.  But then the true necessity of those layers itself has not been questioned.&lt;/p&gt;

&lt;h2 id=&#34;don-t-optimize-layers-remove-them&#34;&gt;Don’t optimize layers, remove them&lt;/h2&gt;

&lt;p&gt;In my belief, optimizing something is a poor fallback to removing its requirement altogether.  That was the goal of my &lt;a href=&#34;http://beyondcontainers.com/blog/a-brief-history-of-containers&#34;&gt;initial work&lt;/a&gt; on OS-level virtualization that led to Linux containers which effectively &lt;a href=&#34;https://www.oreilly.com/ideas/the-unwelcome-guest-why-vms-arent-the-solution-for-next-gen-applications&#34;&gt;removed virtual machines&lt;/a&gt; by running applications directly on the host operating system without requiring an intermediate guest.  For a long time the industry was fighting the wrong battle distracted by optimizing VMs rather than removing the additional layer altogether.&lt;/p&gt;

&lt;p&gt;I see the same pattern repeat itself with the connectivity of microservices, and networking in general.  The network has been going through the changes that physical servers have gone through a decade earlier.  New set of layers and constructs are being introduced.  They are being baked deep into the protocol stack and even silicon without adequately considering low-touch alternatives.  Perhaps there is a way to remove those additional layers altogether.&lt;/p&gt;

&lt;p&gt;I have been thinking about these problems for some time and believe that an approach similar in concept to containers can be applied to the network stack that would fundamentally simplify how application endpoints are connected across the complexity of many intermediate layers.  I have reapplied the same principles from the original work on containers to create &lt;a href=&#34;http://appswitch.io&#34;&gt;AppSwitch&lt;/a&gt;.  Similar to the way containers provide an interface that applications can directly consume, AppSwitch plugs directly into well-defined and ubiquitous network API that applications currently use and directly connects application clients to appropriate servers, skipping all intermediate layers.  In the end, that&amp;rsquo;s what networking is all about.&lt;/p&gt;

&lt;p&gt;Before going into the details of how AppSwitch promises to remove unnecessary layers from the Istio stack, let me give a very brief introduction to its architecture.  Further details are available at the &lt;a href=&#34;https://appswitch.readthedocs.io/en/latest/&#34;&gt;documentation&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;appswitch&#34;&gt;AppSwitch&lt;/h2&gt;

&lt;p&gt;Not unlike the container runtime, AppSwitch consists of a client and a daemon that speak over HTTP via a REST API.  Both the client and the daemon are built as one self-contained binary, &lt;code&gt;ax&lt;/code&gt;.  The client transparently plugs into the application and tracks its system calls related to network connectivity and notifies the daemon about their occurrences.  As an example, let’s say an application makes the &lt;code&gt;connect(2)&lt;/code&gt; system call to the service IP of a Kubernetes service.  The AppSwitch client intercepts the connect call, nullifies it and notifies the daemon about its occurrence along with some context that includes the system call arguments.  The daemon would then handle the system call, potentially by directly connecting to the Pod IP of the upstream server on behalf of the application.&lt;/p&gt;

&lt;p&gt;It is important to note that no data is forwarded between AppSwitch client and daemon.  They are designed to exchange file descriptors (FDs) over a Unix domain socket to avoid having to copy data.  Note also that client is not a separate process.  Rather it directly runs in the context of the application itself.  There is no data copy between the application and AppSwitch client either.&lt;/p&gt;

&lt;h2 id=&#34;delayering-the-stack&#34;&gt;Delayering the stack&lt;/h2&gt;

&lt;p&gt;Now that we have an idea about what AppSwitch does, let’s look at the layers that it optimizes away from a standard service mesh.&lt;/p&gt;

&lt;h3 id=&#34;network-devirtualization&#34;&gt;Network Devirtualization&lt;/h3&gt;

&lt;p&gt;Kubernetes offers simple and well-defined network constructs to the microservice applications it runs.  In order to support them however, it imposes specific &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34;&gt;requirements&lt;/a&gt; on the underlying network.  Meeting those requirements is often not easy.  The go-to solution of adding another layer is typically adopted to satisfy the requirements.  In most cases the additional layer consists of a network overlay that sits between Kubernetes and underlying network.  Traffic produced by the applications is encapsulated at the source and decapsulated at the target, which not only costs network resources but also takes up compute cores.&lt;/p&gt;

&lt;p&gt;Because AppSwitch arbitrates what the application sees through its touchpoints with the platform, it projects a consistent virtual view of the underlying network to the application similar to an overlay but without introducing an additional layer of processing along the datapath.  Just to draw a parallel to containers, the inside of a container looks and feels like a VM.  However the underlying implementation does not intervene along the high-incidence control paths of low-level interrupts etc.&lt;/p&gt;

&lt;p&gt;AppSwitch can be injected into a standard Kubernetes manifest (similar to Istio injection) such that the application’s network is directly handled by AppSwitch bypassing any network overlay underneath.  More details to follow in just a bit.&lt;/p&gt;

&lt;h3 id=&#34;artifacts-of-container-networking&#34;&gt;Artifacts of Container Networking&lt;/h3&gt;

&lt;p&gt;Extending network connectivity from host into the container has been a &lt;a href=&#34;https://kubernetes.io/blog/2016/01/why-kubernetes-doesnt-use-libnetwork/&#34;&gt;major challenge&lt;/a&gt;.  New layers of network plumbing were invented explicitly for that purpose.  As such, an application running in a container is simply a process on the host.  However due to a &lt;a href=&#34;http://appswitch.io/blog/kubernetes_istio_and_network_function_devirtualization_with_appswitch/&#34;&gt;fundamental misalignment&lt;/a&gt; between the network abstraction expected by the application and the abstraction exposed by container network namespace, the process cannot directly access the host network.  Applications think of networking in terms of sockets or sessions whereas network namespaces expose a device abstraction.  Once placed in a network namespace, the process suddenly loses all connectivity.  The notion of veth-pair and corresponding tooling were invented just to close that gap.  The data would now have to go from a host interface into a virtual switch and then through a veth-pair to the virtual network interface of the container network namespace.&lt;/p&gt;

&lt;p&gt;AppSwitch can effectively remove both the virtual switch and veth-pair layers on both ends of the connection.  Since the connections are established by the daemon running on the host using the network that’s already available on the host, there is no need for additional plumbing to bridge host network into the container.  The socket FDs created on the host are passed to the application running within the pod’s network namespace.  By the time the application receives the FD, all control path work (security checks, connection establishment) is already done and the FD is ready for actual IO.&lt;/p&gt;

&lt;h3 id=&#34;skip-tcp-ip-for-colocated-endpoints&#34;&gt;Skip TCP/IP for colocated endpoints&lt;/h3&gt;

&lt;p&gt;TCP/IP is the universal protocol medium over which pretty much all communication occurs.  But if application endpoints happen to be on the same host, is TCP/IP really required?  After all, it does do quite a bit of work and it is quite complex.  Unix sockets are explicitly designed for intrahost communication and AppSwitch can transparently switch the communication to occur over a Unix socket for colocated endpoints.&lt;/p&gt;

&lt;p&gt;For each listening socket of an application, AppSwitch maintains two listening sockets, one each for TCP and Unix.  When a client tries to connect to a server that happens to be colocated, AppSwitch daemon would choose to connect to the Unix listening socket of the server.  The resulting Unix sockets on each end are passed into respective applications.  Once a fully connected FD is returned, the application would simply treat it as a bit pipe.  The protocol doesn’t really matter.  The application may occasionally make protocol specific calls such as &lt;code&gt;getsockname(2)&lt;/code&gt; and AppSwitch would handle them in kind.  It would present consistent responses such that the application would continue to run on.&lt;/p&gt;

&lt;h3 id=&#34;data-pushing-proxy&#34;&gt;Data Pushing Proxy&lt;/h3&gt;

&lt;p&gt;As we continue to look for layers to remove, let us also reconsider the requirement of the proxy layer itself.  There are times when the role of the proxy may degenerate into a plain data pusher:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There may not be a need for any protocol decoding&lt;/li&gt;
&lt;li&gt;The protocol may not be recognized by the proxy&lt;/li&gt;
&lt;li&gt;The communication may be encrypted and the proxy cannot access relevant headers&lt;/li&gt;
&lt;li&gt;The application (redis,  memcached etc.) may be too latency-sensitive and cannot afford the cost of an intermediate proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all these cases, the proxy is not different from any low-level plumbing layer.  In fact, the latency introduced can be far higher because the same level of optimizations won’t be available to a proxy.&lt;/p&gt;

&lt;p&gt;To illustrate this with an example, consider the application shown below.  It consists of a Python app and a set of memcached servers behind it.  An upstream memcached server is selected based on connection time routing.  Speed is the primary concern here.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 75%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 40%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/delayering-istio/memcached.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/delayering-istio/memcached.png&#34; alt=&#34;Proxyless datapath&#34; title=&#34;Latency-sensitive application scenario&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Latency-sensitive application scenario&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;If we look at the data flow in this setup, the Python app makes a connection to the service IP of memcached.  It is redirected to the client-side sidecar.  The sidecar routes the connection to one of the memcached servers and copies the data between the two sockets &amp;ndash; one connected to the app and another connected to memcached.  And the same also occurs on the server side between the server-side sidecar and memcached.  The role of proxy at that point is just boring shoveling of bits between the two sockets.  However, it ends up adding substantial latency to the end-to-end connection.&lt;/p&gt;

&lt;p&gt;Now let us imagine that the app is somehow made to connect directly to memcached, then the two intermediate proxies could be skipped.  The data would flow directly between the app and memcached without any intermediate hops.  AppSwitch can arrange for that by transparently tweaking the target address passed by the Python app when it makes the &lt;code&gt;connect(2)&lt;/code&gt; system call.&lt;/p&gt;

&lt;h3 id=&#34;proxyless-protocol-decoding&#34;&gt;Proxyless Protocol Decoding&lt;/h3&gt;

&lt;p&gt;Things are going to get a bit strange here.  We have seen that the proxy can be bypassed for cases that don’t involve looking into application traffic.  But is there anything we can do even for those other cases?  It turns out, yes.&lt;/p&gt;

&lt;p&gt;In a typical communication between microservices, much of the interesting information is exchanged in the initial headers.  Headers are followed by body or payload which typically represents bulk of the communication.  And once again the proxy degenerates into a data pusher for this part of communication.  AppSwitch provides a nifty mechanism to skip proxy for these cases.&lt;/p&gt;

&lt;p&gt;Even though AppSwitch is not a proxy, it &lt;em&gt;does&lt;/em&gt; arbitrate connections between application endpoints and it &lt;em&gt;does&lt;/em&gt; have access to corresponding socket FDs.  Normally, AppSwitch simply passes those FDs to the application.  But it can also peek into the initial message received on the connection using the &lt;code&gt;MSG_PEEK&lt;/code&gt; option of the &lt;code&gt;recvfrom(2)&lt;/code&gt; system call on the socket.  It allows AppSwitch to examine application traffic without actually removing it from the socket buffers.  When AppSwitch returns the FD to the application and steps out of the datapath, the application would do an actual read on the connection.  AppSwitch uses this technique to perform deeper analysis of application-level traffic and implement sophisticated network functions as discussed in the next section, all without getting into the datapath.&lt;/p&gt;

&lt;h3 id=&#34;zero-cost-load-balancer-firewall-and-network-analyzer&#34;&gt;Zero-Cost Load Balancer, Firewall and Network Analyzer&lt;/h3&gt;

&lt;p&gt;Typical implementations of network functions such as load balancers and firewalls require an intermediate layer that needs to tap into data/packet stream.  Kubernetes&amp;rsquo; implementation of load balancer (kube-proxy) for example introduces a probe into the packet stream through iptables and Istio implements the same at the proxy layer.  But if all that is required is to redirect or drop connections based on policy, it is not really necessary to stay in the datapath during the entire course of the connection.  AppSwitch can take care of that much more efficiently by simply manipulating the control path at the API level.  Given its intimate proximity to the application, AppSwitch also has easy access to various pieces of application level metrics such as dynamics of stack and heap usage, precisely when a service comes alive, attributes of active connections etc., all of which could potentially form a rich signal for monitoring and analytics.&lt;/p&gt;

&lt;p&gt;To go a step further, AppSwitch can also perform L7 load balancing and firewall functions based on the protocol data that it obtains from the socket buffers.  It can synthesize the protocol data and various other signals with the policy information acquired from Pilot to implement a highly efficient form of routing and access control enforcement.  It can essentially &amp;ldquo;influence&amp;rdquo; the application to connect to the right backend server without requiring any changes to the application or its configuration.  It is as if the application itself is infused with policy and traffic-management intelligence.  Except in this case, the application can&amp;rsquo;t escape the influence.&lt;/p&gt;

&lt;p&gt;There is some more black-magic possible that would actually allow modifying the application data stream without getting into the datapath but I am going to save that for a later post.  Current implementation of AppSwitch uses a proxy if the use case requires application protocol traffic to be modified.  For those cases, AppSwitch provides a highly optimal mechanism to attract traffic to the proxy as discussed in the next section.&lt;/p&gt;

&lt;h3 id=&#34;traffic-redirection&#34;&gt;Traffic Redirection&lt;/h3&gt;

&lt;p&gt;Before the sidecar proxy can look into application protocol traffic, it needs to first receive the connections.  Redirection of connections coming into and going out of the application is currently done by a layer of packet filtering that rewrites packets such that they go to respective sidecars.  Creating potentially large number of rules required to represent the redirection policy is tedious.  And the process of applying the rules and updating them, as the target subnets to be captured by the sidecar change, is expensive.&lt;/p&gt;

&lt;p&gt;While some of the performance concerns are being addressed by the Linux community, there is another concern related to privilege: iptables rules need to be updated whenever the policy changes.  Given the current architecture, all privileged operations are performed in an init container that runs just once at the very beginning before privileges are dropped for the actual application.  Since updating iptables rules requires root privileges, there is no way to do that without restarting the application.&lt;/p&gt;

&lt;p&gt;AppSwitch provides a way to redirect application connections without root privilege.  As such, an unprivileged application is already able to connect to any host (modulo firewall rules etc.) and the owner of the application should be allowed to change the host address passed by its application via &lt;code&gt;connect(2)&lt;/code&gt; without requiring additional privilege.&lt;/p&gt;

&lt;h4 id=&#34;socket-delegation&#34;&gt;Socket Delegation&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s see how AppSwitch could help redirect connections without using iptables.  Imagine that the application somehow voluntarily passes the socket FDs that it uses for its communication to the sidecar, then there would be no need for iptables.  AppSwitch provides a feature called &lt;em&gt;socket delegation&lt;/em&gt; that does exactly that.  It allows the sidecar to transparently gain access to copies of socket FDs that the application uses for its communication without any changes to the application itself.&lt;/p&gt;

&lt;p&gt;Here are the sequence of steps that would achieve this in the context of the Python application example.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The application initiates a connection request to the service IP of memcached service.&lt;/li&gt;
&lt;li&gt;The connection request from client is forwarded to the daemon.&lt;/li&gt;
&lt;li&gt;The daemon creates a pair of pre-connected Unix sockets (using &lt;code&gt;socketpair(2)&lt;/code&gt; system call).&lt;/li&gt;
&lt;li&gt;It passes one end of the socket pair into the application such that the application would use that socket FD for read/write.  It also ensures that the application consistently sees it as a legitimate TCP socket as it expects by interposing all calls that query connection properties.&lt;/li&gt;
&lt;li&gt;The other end is passed to sidecar over a different Unix socket where the daemon exposes its API.  Information such as the original destination that the application was connecting to is also conveyed over the same interface.&lt;/li&gt;
&lt;/ol&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 50%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 25%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/delayering-istio/socket-delegation.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/delayering-istio/socket-delegation.png&#34; alt=&#34;Socket delegation protocol&#34; title=&#34;Socket delegation based connection redirection&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Socket delegation based connection redirection&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Once the application and sidecar are connected, the rest happens as usual.  Sidecar would initiate a connection to upstream server and proxy data between the socket received from the daemon and the socket connected to upstream server.  The main difference here is that sidecar would get the connection, not through the &lt;code&gt;accept(2)&lt;/code&gt; system call as it is in the normal case, but from the daemon over the Unix socket.  In addition to listening for connections from applications through the normal &lt;code&gt;accept(2)&lt;/code&gt; channel, the sidecar proxy would connect to the AppSwitch daemon’s REST endpoint and receive sockets that way.&lt;/p&gt;

&lt;p&gt;For completeness, here are the sequence of steps that would occur on the server side:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The application receives a connection&lt;/li&gt;
&lt;li&gt;AppSwitch daemon accepts the connection on behalf of the application&lt;/li&gt;
&lt;li&gt;It creates a pair of pre-connected Unix sockets using &lt;code&gt;socketpair(2)&lt;/code&gt; system call&lt;/li&gt;
&lt;li&gt;One end of the socket pair is returned to the application through the &lt;code&gt;accept(2)&lt;/code&gt; system call&lt;/li&gt;
&lt;li&gt;The other end of the socket pair along with the socket originally accepted by the daemon on behalf of the application is sent to sidecar&lt;/li&gt;
&lt;li&gt;Sidecar would extract the two socket FDs &amp;ndash; a Unix socket FD connected to the application and a TCP socket FD connected to the remote client&lt;/li&gt;
&lt;li&gt;Sidecar would read the metadata supplied by the daemon about the remote client and perform its usual operations&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;sidecar-aware-applications&#34;&gt;&amp;ldquo;Sidecar-Aware&amp;rdquo; Applications&lt;/h4&gt;

&lt;p&gt;Socket delegation feature can be very useful for applications that are explicitly aware of the sidecar and wish to take advantage of its features.  They can voluntarily delegate their network interactions by passing their sockets to the sidecar using the same feature.  In a way, AppSwitch transparently turns every application into a sidecar-aware application.&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-all-come-together&#34;&gt;How does it all come together?&lt;/h2&gt;

&lt;p&gt;Just to step back, Istio offloads common connectivity concerns from applications to a sidecar proxy that performs those functions on behalf of the application.  And AppSwitch simplifies and optimizes the service mesh by sidestepping intermediate layers and invoking the proxy only for cases where it is truly necessary.&lt;/p&gt;

&lt;p&gt;In the rest of this section, I outline how AppSwitch may be integrated with Istio based on a very cursory initial implementation.  This is not intended to be anything like a design doc &amp;ndash; not every possible way of integration is explored and not every detail is worked out.  The intent is to discuss high-level aspects of the implementation to present a rough idea of how the two systems may come together.  The key is that AppSwitch would act as a cushion between Istio and a real proxy.  It would serve as the &amp;ldquo;fast-path&amp;rdquo; for cases that can be performed more efficiently without invoking the sidecar proxy.  And for the cases where the proxy is used, it would shorten the datapath by cutting through unnecessary layers.  Look at this &lt;a href=&#34;http://appswitch.io/blog/kubernetes_istio_and_network_function_devirtualization_with_appswitch/&#34;&gt;blog&lt;/a&gt; for a more detailed walk through of the integration.&lt;/p&gt;

&lt;h3 id=&#34;appswitch-client-injection&#34;&gt;AppSwitch Client Injection&lt;/h3&gt;

&lt;p&gt;Similar to Istio sidecar-injector, a simple tool called &lt;code&gt;ax-injector&lt;/code&gt; injects AppSwitch client into a standard Kubernetes manifest.  Injected client transparently monitors the application and intimates AppSwitch daemon of the control path network API events that the application produces.&lt;/p&gt;

&lt;p&gt;It is possible to not require the injection and work with standard Kubernetes manifests if AppSwitch CNI plugin is used.  In that case, the CNI plugin would perform necessary injection when it gets the initialization callback.  Using injector does have some advantages, however: (1) It works in tightly-controlled environments like GKE (2) It can be easily extended to support other frameworks such as Mesos (3) Same cluster would be able to run standard applications alongside &amp;ldquo;AppSwitch-enabled&amp;rdquo; applications.&lt;/p&gt;

&lt;h3 id=&#34;appswitch-daemonset&#34;&gt;AppSwitch &lt;code&gt;DaemonSet&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;AppSwitch daemon can be configured to run as a &lt;code&gt;DaemonSet&lt;/code&gt; or as an extension to the application that is directly injected into application manifest.  In either case it handles network events coming in from the applications that it supports.&lt;/p&gt;

&lt;h3 id=&#34;agent-for-policy-acquisition&#34;&gt;Agent for policy acquisition&lt;/h3&gt;

&lt;p&gt;This is the component that conveys policy and configuration dictated by Istio to AppSwitch.  It implements xDS API to listen from Pilot and calls appropriate AppSwitch APIs to program the daemon.  For example, it allows the load balancing strategy, as specified by &lt;code&gt;istioctl&lt;/code&gt;, to be translated into equivalent AppSwitch capability.&lt;/p&gt;

&lt;h3 id=&#34;platform-adapter-for-appswitch-auto-curated-service-registry&#34;&gt;Platform Adapter for AppSwitch &amp;ldquo;Auto-Curated&amp;rdquo; Service Registry&lt;/h3&gt;

&lt;p&gt;Given that AppSwitch is in the control path of applications’ network APIs, it has ready access to the topology of services across the cluster.  AppSwitch exposes that information in the form of a service registry that is automatically and (almost) synchronously updated as applications and their services come and go.  A new platform adapter for AppSwitch alongside Kubernetes, Eureka etc. would provide the details of upstream services to Istio.  This is not strictly necessary but it does make it easier to correlate service endpoints received from Pilot by AppSwitch agent above.&lt;/p&gt;

&lt;h3 id=&#34;proxy-integration-and-chaining&#34;&gt;Proxy integration and chaining&lt;/h3&gt;

&lt;p&gt;Connections that do require deep scanning and mutation of application traffic are handed off to an external proxy through the socket delegation mechanism discussed earlier.  It uses an extended version of &lt;a href=&#34;https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&#34;&gt;proxy protocol&lt;/a&gt;.  In addition to the simple parameters supported by the proxy protocol, a variety of other metadata (including the initial protocol headers obtained from the socket buffers) and live socket FDs (representing application connections) are forwarded to the proxy.&lt;/p&gt;

&lt;p&gt;The proxy can look at the metadata and decide how to proceed.  It could respond by accepting the connection to do the proxying or by directing AppSwitch to allow the connection and use the fast-path or to just drop the connection.&lt;/p&gt;

&lt;p&gt;One of the interesting aspects of the mechanism is that, when the proxy accepts a socket from AppSwitch, it can in turn delegate the socket to another proxy.  In fact that is how AppSwitch currently works.  It uses a simple built-in proxy to examine the metadata and decide whether to handle the connection internally or to hand it off to an external proxy (Envoy).  The same mechanism can be potentially extended to allow for a chain of plugins, each looking for a specific signature, with the last one in the chain doing the real proxy work.&lt;/p&gt;

&lt;h2 id=&#34;it-s-not-just-about-performance&#34;&gt;It&amp;rsquo;s not just about performance&lt;/h2&gt;

&lt;p&gt;Removing intermediate layers along the datapath is not just about improving performance.  Performance is a great side effect, but it &lt;em&gt;is&lt;/em&gt; a side effect.  There are a number of important advantages to an API level approach.&lt;/p&gt;

&lt;h3 id=&#34;automatic-application-onboarding-and-policy-authoring&#34;&gt;Automatic application onboarding and policy authoring&lt;/h3&gt;

&lt;p&gt;Before microservices and service mesh, traffic management was done by load balancers and access controls were enforced by firewalls.  Applications were identified by IP addresses and DNS names which were relatively static.  In fact, that&amp;rsquo;s still the status quo in most environments.  Such environments stand to benefit immensely from service mesh.  However a practical and scalable bridge to the new world needs to be provided.  The difficulty in transformation is not as much due to lack of features and functionality but the investment required to rethink and reimplement the entire application infrastructure.  Currently most of the policy and configuration exists in the form of load balancer and firewall rules.  Somehow that existing context needs to be leveraged in providing a scalable path to adopting the service mesh model.&lt;/p&gt;

&lt;p&gt;AppSwitch can substantially ease the onboarding process.  It can project the same network environment to the application at the target as its current source environment.  Not having any assistance here is typically a non-starter in case of traditional applications which have complex configuration files with static IP addresses or specific DNS names hard-coded in them.  AppSwitch could help capture those applications along with their existing configuration and connect them over a service mesh without requiring any changes.&lt;/p&gt;

&lt;h3 id=&#34;broader-application-and-protocol-support&#34;&gt;Broader application and protocol support&lt;/h3&gt;

&lt;p&gt;HTTP clearly dominates the modern application landscapes but once we talk about traditional applications and environments, we&amp;rsquo;d encounter all kinds of protocols and transports.  Particularly, support for UDP becomes unavoidable.  Traditional application servers such as IBM WebSphere rely extensively on UDP.  Most multimedia applications use UDP media streams.  Of course DNS is probably the most widely used UDP &amp;ldquo;application&amp;rdquo;.  AppSwitch supports UDP at the API level much the same way as TCP and when it detects a UDP connection, it can transparently handle it in its &amp;ldquo;fast-path&amp;rdquo; rather than delegating it to the proxy.&lt;/p&gt;

&lt;h3 id=&#34;client-ip-preservation-and-end-to-end-principle&#34;&gt;Client IP preservation and end-to-end principle&lt;/h3&gt;

&lt;p&gt;The same mechanism that preserves the source network environment can also preserve client IP addresses as seen by the servers.  With a sidecar proxy in place, connection requests come from the proxy rather than the client.  As a result, the peer address (IP:port) of the connection as seen by the server would be that of the proxy rather than the client.  AppSwitch ensures that the server sees correct address of the client, logs it correctly and any decisions made based on the client address remain valid.  More generally, AppSwitch preserves the &lt;a href=&#34;https://en.wikipedia.org/wiki/End-to-end_principle&#34;&gt;end-to-end principle&lt;/a&gt; which is otherwise broken by intermediate layers that obfuscate the true underlying context.&lt;/p&gt;

&lt;h3 id=&#34;enhanced-application-signal-with-access-to-encrypted-headers&#34;&gt;Enhanced application signal with access to encrypted headers&lt;/h3&gt;

&lt;p&gt;Encrypted traffic completely undermines the ability of the service mesh to analyze application traffic.  API level interposition could potentially offer a way around it.  Current implementation of AppSwitch gains access to application&amp;rsquo;s network API at the system call level.  However it is possible in principle to influence the application at an API boundary, higher in the stack where application data is not yet encrypted or already decrypted.  Ultimately the data is always produced in the clear by the application and then encrypted at some point before it goes out.  Since AppSwitch directly runs within the memory context of the application, it is possible to tap into the data higher on the stack where it is still held in clear.  Only requirement for this to work is that the API used for encryption should be well-defined and amenable for interposition.  Particularly, it requires access to the symbol table of the application binaries.  Just to be clear, AppSwitch doesn&amp;rsquo;t implement this today.&lt;/p&gt;

&lt;h2 id=&#34;so-what-s-the-net&#34;&gt;So what’s the net?&lt;/h2&gt;

&lt;p&gt;AppSwitch removes a number of layers and processing from the standard service mesh stack.  What does all that translate to in terms of performance?&lt;/p&gt;

&lt;p&gt;We ran some initial experiments to characterize the extent of the opportunity for optimization based on the initial integration of AppSwitch discussed earlier.  The experiments were run on GKE using fortio-0.11.0, istio-0.8.0 and appswitch-0.4.0-2.  In case of the proxyless test, AppSwitch daemon was run as a &lt;code&gt;DaemonSet&lt;/code&gt; on the Kubernetes cluster and the Fortio pod spec was modified to inject AppSwitch client.  These were the only two changes made to the setup.  The test was configured to measure the latency of GRPC requests across 100 concurrent connections.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 55%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/delayering-istio/perf.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/delayering-istio/perf.png&#34; alt=&#34;Performance comparison&#34; title=&#34;Latency with and without AppSwitch&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Latency with and without AppSwitch&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Initial results indicate a difference of over 18x in p50 latency with and without AppSwitch (3.99ms vs 72.96ms).  The difference was around 8x when mixer and access logs were disabled.  Clearly the difference was due to sidestepping all those intermediate layers along the datapath.  Unix socket optimization wasn&amp;rsquo;t triggered in case of AppSwitch because client and server pods were scheduled to separate hosts.  End-to-end latency of AppSwitch case would have been even lower if the client and server happened to be colocated.  Essentially the client and server running in their respective pods of the Kubernetes cluster are directly connected over a TCP socket going over the GKE network &amp;ndash; no tunneling, bridge or proxies.&lt;/p&gt;

&lt;h2 id=&#34;net-net&#34;&gt;Net Net&lt;/h2&gt;

&lt;p&gt;I started out with David Wheeler&amp;rsquo;s seemingly reasonable quote that says adding another layer is not a solution for the problem of too many layers.  And I argued through most of the blog that current network stack already has too many layers and that they should be removed.  But isn&amp;rsquo;t AppSwitch itself a layer?&lt;/p&gt;

&lt;p&gt;Yes, AppSwitch is clearly another layer.  However it is one that can remove multiple other layers.  In doing so, it seamlessly glues the new service mesh layer with existing layers of traditional network environments.  It offsets the cost of sidecar proxy and as Istio graduates to 1.0, it provides a bridge for existing applications and their network environments to transition to the new world of service mesh.&lt;/p&gt;

&lt;p&gt;Perhaps Wheeler’s quote should read:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All problems in computer science can be solved with another layer, &lt;strong&gt;even&lt;/strong&gt; the problem of too many layers!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Thanks to Mandar Jog (Google) for several discussions about the value of AppSwitch for Istio and to the following individuals (in alphabetical order) for their review of early drafts of this blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frank Budinsky (IBM)&lt;/li&gt;
&lt;li&gt;Lin Sun (IBM)&lt;/li&gt;
&lt;li&gt;Shriram Rajagopalan (VMware)&lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/delayering-istio/delayering-istio/</link>
          <author>Dinesh Subhraveti (AppOrbit and Columbia University)</author>
          <guid isPermaLink="true">/en/blog/2018/delayering-istio/delayering-istio/</guid>

          
              <category>appswitch</category>
          
              <category>performance</category>
          
        </item>
      
    
      
        <item>
          <title>Micro-Segmentation with Istio Authorization</title>
          <description>

&lt;p&gt;Micro-segmentation is a security technique that creates secure zones in cloud deployments and allows organizations to
isolate workloads from one another and secure them individually.
&lt;a href=&#34;/docs/concepts/security/#authorization&#34;&gt;Istio&amp;rsquo;s authorization feature&lt;/a&gt;, also known as Istio Role Based Access Control,
provides micro-segmentation for services in an Istio mesh. It features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization at different levels of granularity, including namespace level, service level, and method level.&lt;/li&gt;
&lt;li&gt;Service-to-service and end-user-to-service authorization.&lt;/li&gt;
&lt;li&gt;High performance, as it is enforced natively on Envoy.&lt;/li&gt;
&lt;li&gt;Role-based semantics, which makes it easy to use.&lt;/li&gt;
&lt;li&gt;High flexibility as it allows users to define conditions using
&lt;a href=&#34;/docs/reference/config/authorization/constraints-and-properties/&#34;&gt;combinations of attributes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blog post, you&amp;rsquo;ll learn about the main authorization features and how to use them in different situations.&lt;/p&gt;

&lt;h2 id=&#34;characteristics&#34;&gt;Characteristics&lt;/h2&gt;

&lt;h3 id=&#34;rpc-level-authorization&#34;&gt;RPC level authorization&lt;/h3&gt;

&lt;p&gt;Authorization is performed at the level of individual RPCs. Specifically, it controls &amp;ldquo;who can access my &lt;code&gt;bookstore&lt;/code&gt; service”,
or &amp;ldquo;who can access method &lt;code&gt;getBook&lt;/code&gt; in my &lt;code&gt;bookstore&lt;/code&gt; service”. It is not designed to control access to application-specific
resource instances, like access to &amp;ldquo;storage bucket X” or access to &amp;ldquo;3rd book on 2nd shelf”. Today this kind of application
specific access control logic needs to be handled by the application itself.&lt;/p&gt;

&lt;h3 id=&#34;role-based-access-control-with-conditions&#34;&gt;Role-based access control with conditions&lt;/h3&gt;

&lt;p&gt;Authorization is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Role-based_access_control&#34;&gt;role-based access control (RBAC)&lt;/a&gt; system,
contrast this to an &lt;a href=&#34;https://en.wikipedia.org/wiki/Attribute-based_access_control&#34;&gt;attribute-based access control (ABAC)&lt;/a&gt;
system. Compared to ABAC, RBAC has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Roles allow grouping of attributes.&lt;/strong&gt; Roles are groups of permissions, which specifies the actions you are allowed
to perform on a system. Users are grouped based on the roles within an organization. You can define the roles and reuse
them for different cases.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;It is easier to understand and reason about who has access.&lt;/strong&gt; The RBAC concepts map naturally to business concepts.
For example, a DB admin may have all access to DB backend services, while a web client may only be able to view the
frontend service.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;It reduces unintentional errors.&lt;/strong&gt; RBAC policies make otherwise complex security changes easier. You won&amp;rsquo;t have
duplicate configurations in multiple places and later forget to update some of them when you need to make changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, Istio&amp;rsquo;s authorization system is not a traditional RBAC system. It also allows users to define &lt;strong&gt;conditions&lt;/strong&gt; using
&lt;a href=&#34;/docs/reference/config/authorization/constraints-and-properties/&#34;&gt;combinations of attributes&lt;/a&gt;. This gives Istio
flexibility to express complex access control policies. In fact, &lt;strong&gt;the &amp;ldquo;RBAC + conditions” model
that Istio authorization adopts, has all the benefits an RBAC system has, and supports the level of flexibility that
normally an ABAC system provides.&lt;/strong&gt; You&amp;rsquo;ll see some &lt;a href=&#34;#examples&#34;&gt;examples&lt;/a&gt; below.&lt;/p&gt;

&lt;h3 id=&#34;high-performance&#34;&gt;High performance&lt;/h3&gt;

&lt;p&gt;Because of its simple semantics, Istio authorization is enforced on Envoy as a native authorization support. At runtime, the
authorization decision is completely done locally inside an Envoy filter, without dependency to any external module.
This allows Istio authorization to achieve high performance and availability.&lt;/p&gt;

&lt;h3 id=&#34;work-with-without-primary-identities&#34;&gt;Work with/without primary identities&lt;/h3&gt;

&lt;p&gt;Like any other RBAC system, Istio authorization is identity aware. In Istio authorization policy, there is a primary
identity called &lt;code&gt;user&lt;/code&gt;, which represents the principal of the client.&lt;/p&gt;

&lt;p&gt;In addition to the primary identity, you can also specify any conditions that define the identities. For example,
you can specify the client identity as &amp;ldquo;user Alice calling from Bookstore frontend service”, in which case,
you have a combined identity of the calling service (&lt;code&gt;Bookstore frontend&lt;/code&gt;) and the end user (&lt;code&gt;Alice&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To improve security, you should enable &lt;a href=&#34;/docs/concepts/security/#authentication&#34;&gt;authentication features&lt;/a&gt;,
and use authenticated identities in authorization policies. However, strongly authenticated identity is not required
for using authorization. Istio authorization works with or without identities. If you are working with a legacy system,
you may not have mutual TLS or JWT authentication setup for your mesh. In this case, the only way to identify the client is, for example,
through IP. You can still use Istio authorization to control which IP addresses or IP ranges are allowed to access your service.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/docs/tasks/security/role-based-access-control/&#34;&gt;authorization task&lt;/a&gt; shows you how to
use Istio&amp;rsquo;s authorization feature to control namespace level and service level access using the
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo application&lt;/a&gt;. In this section, you&amp;rsquo;ll see more examples on how to achieve
micro-segmentation with Istio authorization.&lt;/p&gt;

&lt;h3 id=&#34;namespace-level-segmentation-via-rbac-conditions&#34;&gt;Namespace level segmentation via RBAC + conditions&lt;/h3&gt;

&lt;p&gt;Suppose you have services in the &lt;code&gt;frontend&lt;/code&gt; and &lt;code&gt;backend&lt;/code&gt; namespaces. You would like to allow all your services
in the &lt;code&gt;frontend&lt;/code&gt; namespace to access all services that are marked &lt;code&gt;external&lt;/code&gt; in the &lt;code&gt;backend&lt;/code&gt; namespace.&lt;/p&gt;















































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRole
metadata:
  name: external-api-caller
  namespace: backend
spec:
  rules:
  - services: [&amp;#34;*&amp;#34;]
    methods: [&amp;#34;*”]
    constraints:
    - key: &amp;#34;destination.labels[visibility]”
      values: [&amp;#34;external&amp;#34;]
---
apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRoleBinding
metadata:
  name: external-api-caller
  namespace: backend
spec:
  subjects:
  - properties:
      source.namespace: &amp;#34;frontend”
  roleRef:
    kind: ServiceRole
    name: &amp;#34;external-api-caller&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The &lt;code&gt;ServiceRole&lt;/code&gt; and &lt;code&gt;ServiceRoleBinding&lt;/code&gt; above expressed &amp;ldquo;&lt;em&gt;who&lt;/em&gt; is allowed to do &lt;em&gt;what&lt;/em&gt; under *which conditions*”
(RBAC + conditions). Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;who”&lt;/strong&gt; are the services in the &lt;code&gt;frontend&lt;/code&gt; namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;what”&lt;/strong&gt; is to call services in &lt;code&gt;backend&lt;/code&gt; namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;conditions”&lt;/strong&gt; is the &lt;code&gt;visibility&lt;/code&gt; label of the destination service having the value &lt;code&gt;external&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;service-method-level-isolation-with-without-primary-identities&#34;&gt;Service/method level isolation with/without primary identities&lt;/h3&gt;

&lt;p&gt;Here is another example that demonstrates finer grained access control at service/method level. The first step
 is to define a &lt;code&gt;book-reader&lt;/code&gt; &lt;code&gt;ServiceRole&lt;/code&gt; that allows READ access to &lt;code&gt;/books/*&lt;/code&gt; resource in &lt;code&gt;bookstore&lt;/code&gt; service.&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRole
metadata:
  name: book-reader
  namespace: default
spec:
  rules:
  - services: [&amp;#34;bookstore.default.svc.cluster.local&amp;#34;]
    paths: [&amp;#34;/books/*”]
    methods: [&amp;#34;GET”]&lt;/code&gt;&lt;/pre&gt;







&lt;h4 id=&#34;using-authenticated-client-identities&#34;&gt;Using authenticated client identities&lt;/h4&gt;

&lt;p&gt;Suppose you want to grant this &lt;code&gt;book-reader&lt;/code&gt; role to your &lt;code&gt;bookstore-frontend&lt;/code&gt; service. If you have enabled
&lt;a href=&#34;/docs/concepts/security/#mutual-tls-authentication&#34;&gt;mutual TLS authentication&lt;/a&gt; for your mesh, you can use a
service account to identify your &lt;code&gt;bookstore-frontend&lt;/code&gt; service. Granting the &lt;code&gt;book-reader&lt;/code&gt; role to the &lt;code&gt;bookstore-frontend&lt;/code&gt;
service can be done by creating a &lt;code&gt;ServiceRoleBinding&lt;/code&gt; as shown below:&lt;/p&gt;









































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: default
spec:
  subjects:
  - user: &amp;#34;cluster.local/ns/default/sa/bookstore-frontend”
  roleRef:
    kind: ServiceRole
    name: &amp;#34;book-reader&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;You may want to restrict this further by adding a condition that &amp;ldquo;only users who belong to the &lt;code&gt;qualified-reviewer&lt;/code&gt; group are
allowed to read books”. The &lt;code&gt;qualified-reviewer&lt;/code&gt; group is the end user identity that is authenticated by
&lt;a href=&#34;/docs/concepts/security/#authentication&#34;&gt;JWT authentication&lt;/a&gt;. In this case, the combination of the client service identity
(&lt;code&gt;bookstore-frontend&lt;/code&gt;) and the end user identity (&lt;code&gt;qualified-reviewer&lt;/code&gt;) is used in the authorization policy.&lt;/p&gt;



















































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: default
spec:
  subjects:
  - user: &amp;#34;cluster.local/ns/default/sa/bookstore-frontend”
    properties:
      request.auth.claims[group]: &amp;#34;qualified-reviewer”
  roleRef:
    kind: ServiceRole
    name: &amp;#34;book-reader&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;h4 id=&#34;client-does-not-have-identity&#34;&gt;Client does not have identity&lt;/h4&gt;

&lt;p&gt;Using authenticated identities in authorization policies is strongly recommended for security. However, if you have a
legacy system that does not support authentication, you may not have authenticated identities for your services.
You can still use Istio authorization to protect your services even without authenticated identities. The example below
shows that you can specify allowed source IP range in your authorization policy.&lt;/p&gt;














































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;rbac.istio.io/v1alpha1&amp;#34;
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: default
spec:
  subjects:
  - properties:
      source.ip: 10.20.0.0/9
  roleRef:
    kind: ServiceRole
    name: &amp;#34;book-reader&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Istio’s authorization feature provides authorization at namespace-level, service-level, and method-level granularity.
It adopts &amp;ldquo;RBAC + conditions” model, which makes it easy to use and understand as an RBAC system, while providing the level of
flexibility that an ABAC system normally provides. Istio authorization achieves high performance as it is enforced
natively on Envoy. While it provides the best security by working together with
&lt;a href=&#34;/docs/concepts/security/#authentication&#34;&gt;Istio authentication features&lt;/a&gt;, Istio authorization can also be used to
provide access control for legacy systems that do not have authentication.&lt;/p&gt;
</description>
          <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/istio-authorization/</link>
          <author>Limin Wang</author>
          <guid isPermaLink="true">/en/blog/2018/istio-authorization/</guid>

          
              <category>authorization</category>
          
              <category>Role Based Access Control</category>
          
              <category>security</category>
          
        </item>
      
    
      
        <item>
          <title>Exporting Logs to BigQuery, GCS, Pub/Sub through Stackdriver</title>
          <description>

&lt;p&gt;This post shows how to direct Istio logs to &lt;a href=&#34;https://cloud.google.com/stackdriver/&#34;&gt;Stackdriver&lt;/a&gt;
and export those logs to various configured sinks such as such as
&lt;a href=&#34;https://cloud.google.com/bigquery/&#34;&gt;BigQuery&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/storage/&#34;&gt;Google Cloud Storage(GCS)&lt;/a&gt;
or &lt;a href=&#34;https://cloud.google.com/pubsub/&#34;&gt;Cloud Pub/Sub&lt;/a&gt;. At the end of this post you can perform
analytics on Istio data from your favorite places such as BigQuery, GCS or Cloud Pub/Sub.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt; sample application is used as the example
application throughout this task.&lt;/p&gt;

&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/docs/setup/&#34;&gt;Install Istio&lt;/a&gt; in your cluster and deploy an application.&lt;/p&gt;

&lt;h2 id=&#34;configuring-istio-to-export-logs&#34;&gt;Configuring Istio to export logs&lt;/h2&gt;

&lt;p&gt;Istio exports logs using the &lt;code&gt;logentry&lt;/code&gt; &lt;a href=&#34;/docs/reference/config/policy-and-telemetry/templates/logentry&#34;&gt;template&lt;/a&gt;.
This specifies all the variables that are available for analysis. It
contains information like source service, destination service, auth
metrics (coming..) among others. Following is a diagram of the pipeline:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 75%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 75%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/export-logs-through-stackdriver/./istio-analytics-using-stackdriver.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/export-logs-through-stackdriver/./istio-analytics-using-stackdriver.png&#34; alt=&#34;Diagram of exporting logs from Istio to Stackdriver for analysis&#34; title=&#34;Diagram of exporting logs from Istio to Stackdriver for analysis&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Diagram of exporting logs from Istio to Stackdriver for analysis&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Istio supports exporting logs to Stackdriver which can in turn be configured to export
logs to your favorite sink like BigQuery, Pub/Sub or GCS. Please follow the steps
below to setup your favorite sink for exporting logs first and then Stackdriver
in Istio.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-various-log-sinks&#34;&gt;Setting up various log sinks&lt;/h3&gt;

&lt;p&gt;Common setup for all sinks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enable &lt;a href=&#34;https://cloud.google.com/monitoring/api/enable-api&#34;&gt;Stackdriver Monitoring API&lt;/a&gt; for the project.&lt;/li&gt;
&lt;li&gt;Make sure &lt;code&gt;principalEmail&lt;/code&gt; that would be setting up the sink has write access to the project and Logging Admin role permissions.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable is set. Please follow instructions &lt;a href=&#34;https://cloud.google.com/docs/authentication/getting-started&#34;&gt;here&lt;/a&gt; to set it up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;bigquery&#34;&gt;BigQuery&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/bigquery/docs/datasets&#34;&gt;Create a BigQuery dataset&lt;/a&gt; as a destination for the logs export.&lt;/li&gt;
&lt;li&gt;Record the ID of the dataset. It will be needed to configure the Stackdriver handler.
It would be of the form &lt;code&gt;bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET_ID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Give &lt;a href=&#34;https://cloud.google.com/logging/docs/api/tasks/exporting-logs#writing_to_the_destination&#34;&gt;sink’s writer identity&lt;/a&gt;: &lt;code&gt;cloud-logs@system.gserviceaccount.com&lt;/code&gt; BigQuery Data Editor role in IAM.&lt;/li&gt;
&lt;li&gt;If using &lt;a href=&#34;/docs/setup/kubernetes/platform-setup/gke/&#34;&gt;Google Kubernetes Engine&lt;/a&gt;, make sure &lt;code&gt;bigquery&lt;/code&gt; &lt;a href=&#34;https://cloud.google.com/sdk/gcloud/reference/container/clusters/create&#34;&gt;Scope&lt;/a&gt; is enabled on the cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;google-cloud-storage-gcs&#34;&gt;Google Cloud Storage (GCS)&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/storage/docs/creating-buckets&#34;&gt;Create a GCS bucket&lt;/a&gt; where you would like logs to get exported in GCS.&lt;/li&gt;
&lt;li&gt;Recode the ID of the bucket. It will be needed to configure Stackdriver.
It would be of the form &lt;code&gt;storage.googleapis.com/[BUCKET_ID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Give &lt;a href=&#34;https://cloud.google.com/logging/docs/api/tasks/exporting-logs#writing_to_the_destination&#34;&gt;sink’s writer identity&lt;/a&gt;: &lt;code&gt;cloud-logs@system.gserviceaccount.com&lt;/code&gt; Storage Object Creator role in IAM.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;google-cloud-pub-sub&#34;&gt;Google Cloud Pub/Sub&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/pubsub/docs/admin&#34;&gt;Create a topic&lt;/a&gt; where you would like logs to get exported in Google Cloud Pub/Sub.&lt;/li&gt;
&lt;li&gt;Recode the ID of the topic. It will be needed to configure Stackdriver.
It would be of the form &lt;code&gt;pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Give &lt;a href=&#34;https://cloud.google.com/logging/docs/api/tasks/exporting-logs#writing_to_the_destination&#34;&gt;sink’s writer identity&lt;/a&gt;: &lt;code&gt;cloud-logs@system.gserviceaccount.com&lt;/code&gt; Pub/Sub Publisher role in IAM.&lt;/li&gt;
&lt;li&gt;If using &lt;a href=&#34;/docs/setup/kubernetes/platform-setup/gke/&#34;&gt;Google Kubernetes Engine&lt;/a&gt;, make sure &lt;code&gt;pubsub&lt;/code&gt; &lt;a href=&#34;https://cloud.google.com/sdk/gcloud/reference/container/clusters/create&#34;&gt;Scope&lt;/a&gt; is enabled on the cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;setting-up-stackdriver&#34;&gt;Setting up Stackdriver&lt;/h3&gt;

&lt;p&gt;A Stackdriver handler must be created to export data to Stackdriver. The configuration for
a Stackdriver handler is described &lt;a href=&#34;/docs/reference/config/policy-and-telemetry/adapters/stackdriver/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Save the following yaml file as &lt;code&gt;stackdriver.yaml&lt;/code&gt;. Replace &lt;code&gt;&amp;lt;project_id&amp;gt;,
&amp;lt;sink_id&amp;gt;, &amp;lt;sink_destination&amp;gt;, &amp;lt;log_filter&amp;gt;&lt;/code&gt; with their specific values.&lt;/p&gt;






























































































































































































































































































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;config.istio.io/v1alpha2&amp;#34;
kind: stackdriver
metadata:
  name: handler
  namespace: istio-system
spec:
  # We&amp;#39;ll use the default value from the adapter, once per minute, so we don&amp;#39;t need to supply a value.
  # pushInterval: 1m
  # Must be supplied for the Stackdriver adapter to work
  project_id: &amp;#34;&amp;lt;project_id&amp;gt;&amp;#34;
  # One of the following must be set; the preferred method is `appCredentials`, which corresponds to
  # Google Application Default Credentials.
  # If none is provided we default to app credentials.
  # appCredentials:
  # apiKey:
  # serviceAccountPath:
  # Describes how to map Istio logs into Stackdriver.
  logInfo:
    accesslog.logentry.istio-system:
      payloadTemplate: &amp;#39;{{or (.sourceIp) &amp;#34;-&amp;#34;}} - {{or (.sourceUser) &amp;#34;-&amp;#34;}} [{{or (.timestamp.Format &amp;#34;02/Jan/2006:15:04:05 -0700&amp;#34;) &amp;#34;-&amp;#34;}}] &amp;#34;{{or (.method) &amp;#34;-&amp;#34;}} {{or (.url) &amp;#34;-&amp;#34;}} {{or (.protocol) &amp;#34;-&amp;#34;}}&amp;#34; {{or (.responseCode) &amp;#34;-&amp;#34;}} {{or (.responseSize) &amp;#34;-&amp;#34;}}&amp;#39;
      httpMapping:
        url: url
        status: responseCode
        requestSize: requestSize
        responseSize: responseSize
        latency: latency
        localIp: sourceIp
        remoteIp: destinationIp
        method: method
        userAgent: userAgent
        referer: referer
      labelNames:
      - sourceIp
      - destinationIp
      - sourceService
      - sourceUser
      - sourceNamespace
      - destinationIp
      - destinationService
      - destinationNamespace
      - apiClaims
      - apiKey
      - protocol
      - method
      - url
      - responseCode
      - responseSize
      - requestSize
      - latency
      - connectionMtls
      - userAgent
      - responseTimestamp
      - receivedBytes
      - sentBytes
      - referer
      sinkInfo:
        id: &amp;#39;&amp;lt;sink_id&amp;gt;&amp;#39;
        destination: &amp;#39;&amp;lt;sink_destination&amp;gt;&amp;#39;
        filter: &amp;#39;&amp;lt;log_filter&amp;gt;&amp;#39;
---
apiVersion: &amp;#34;config.istio.io/v1alpha2&amp;#34;
kind: rule
metadata:
  name: stackdriver
  namespace: istio-system
spec:
  match: &amp;#34;true&amp;#34; # If omitted match is true.
  actions:
  - handler: handler.stackdriver
    instances:
    - accesslog.logentry
---&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push the configuration&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f stackdriver.yaml
stackdriver &amp;#34;handler&amp;#34; created
rule &amp;#34;stackdriver&amp;#34; created
logentry &amp;#34;stackdriverglobalmr&amp;#34; created
metric &amp;#34;stackdriverrequestcount&amp;#34; created
metric &amp;#34;stackdriverrequestduration&amp;#34; created
metric &amp;#34;stackdriverrequestsize&amp;#34; created
metric &amp;#34;stackdriverresponsesize&amp;#34; created&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send traffic to the sample application.&lt;/p&gt;

&lt;p&gt;For the Bookinfo sample, visit &lt;code&gt;http://$GATEWAY_URL/productpage&lt;/code&gt; in your web
browser or issue the following command:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ curl http://$GATEWAY_URL/productpage&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify that logs are flowing through Stackdriver to the configured sink.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stackdriver: Navigate to the &lt;a href=&#34;https://pantheon.corp.google.com/logs/viewer&#34;&gt;Stackdriver Logs
Viewer&lt;/a&gt; for your project
and look under &amp;ldquo;GKE Container&amp;rdquo; -&amp;gt; &amp;ldquo;Cluster Name&amp;rdquo; -&amp;gt; &amp;ldquo;Namespace Id&amp;rdquo; for
Istio Access logs.&lt;/li&gt;
&lt;li&gt;BigQuery: Navigate to the &lt;a href=&#34;https://bigquery.cloud.google.com/&#34;&gt;BigQuery
Interface&lt;/a&gt; for your project and you
should find a table with prefix &lt;code&gt;accesslog_logentry_istio&lt;/code&gt; in your sink
dataset.&lt;/li&gt;
&lt;li&gt;GCS: Navigate to the &lt;a href=&#34;https://pantheon.corp.google.com/storage/browser/&#34;&gt;Storage
Browser&lt;/a&gt; for your
project and you should find a bucket named
&lt;code&gt;accesslog.logentry.istio-system&lt;/code&gt; in your sink bucket.&lt;/li&gt;
&lt;li&gt;Pub/Sub: Navigate to the &lt;a href=&#34;https://pantheon.corp.google.com/cloudpubsub/topicList&#34;&gt;Pub/Sub
TopicList&lt;/a&gt; for
your project and you should find a topic for &lt;code&gt;accesslog&lt;/code&gt; in your sink
topic.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;understanding-what-happened&#34;&gt;Understanding what happened&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Stackdriver.yaml&lt;/code&gt; file above configured Istio to send accesslogs to
Stackdriver and then added a sink configuration where these logs could be
exported. In detail as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Added a handler of kind &lt;code&gt;stackdriver&lt;/code&gt;&lt;/p&gt;















































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;config.istio.io/v1alpha2&amp;#34;
kind: stackdriver
metadata:
  name: handler
  namespace: &amp;lt;your defined namespace&amp;gt;&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added logInfo in spec&lt;/p&gt;













































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;spec:
  logInfo: accesslog.logentry.istio-system:
    labelNames:
    - sourceIp
    - destinationIp
    ...
    ...
    sinkInfo:
      id: &amp;#39;&amp;lt;sink_id&amp;gt;&amp;#39;
      destination: &amp;#39;&amp;lt;sink_destination&amp;gt;&amp;#39;
      filter: &amp;#39;&amp;lt;log_filter&amp;gt;&amp;#39;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;In the above configuration sinkInfo contains information about the sink where you want
the logs to get exported to. For more information on how this gets filled for different sinks please refer
&lt;a href=&#34;https://cloud.google.com/logging/docs/export/#sink-terms&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added a rule for Stackdriver&lt;/p&gt;








































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: &amp;#34;config.istio.io/v1alpha2&amp;#34;
kind: rule
metadata:
  name: stackdriver
  namespace: istio-system spec:
  match: &amp;#34;true&amp;#34; # If omitted match is true
actions:
- handler: handler.stackdriver
  instances:
  - accesslog.logentry&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the new Stackdriver configuration:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete -f stackdriver.yaml&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are not planning to explore any follow-on tasks, refer to the
&lt;a href=&#34;/docs/examples/bookinfo/#cleanup&#34;&gt;Bookinfo cleanup&lt;/a&gt; instructions to shutdown
the application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;availability-of-logs-in-export-sinks&#34;&gt;Availability of logs in export sinks&lt;/h2&gt;

&lt;p&gt;Export to BigQuery is within minutes (we see it to be almost instant), GCS can
have a delay of 2 to 12 hours and Pub/Sub is almost immediately.&lt;/p&gt;
</description>
          <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/export-logs-through-stackdriver/</link>
          <author>Nupur Garg and Douglas Reid</author>
          <guid isPermaLink="true">/en/blog/2018/export-logs-through-stackdriver/</guid>

          
        </item>
      
    
      
        <item>
          <title>Introducing the Istio v1alpha3 routing API</title>
          <description>

&lt;p&gt;Up until now, Istio has provided a simple API for traffic management using four configuration resources:
&lt;code&gt;RouteRule&lt;/code&gt;, &lt;code&gt;DestinationPolicy&lt;/code&gt;, &lt;code&gt;EgressRule&lt;/code&gt;, and (Kubernetes) &lt;code&gt;Ingress&lt;/code&gt;.
With this API, users have been able to easily manage the flow of traffic in an Istio service mesh.
The API has allowed users to route requests to specific versions of services, inject delays and failures for resilience
testing, add timeouts and circuit breakers, and more, all without changing the application code itself.&lt;/p&gt;

&lt;p&gt;While this functionality has proven to be a very compelling part of Istio, user feedback has also shown that this API does
have some shortcomings, specifically when using it to manage very large applications containing thousands of services, and
when working with protocols other than HTTP. Furthermore, the use of Kubernetes &lt;code&gt;Ingress&lt;/code&gt; resources to configure external
traffic has proven to be woefully insufficient for our needs.&lt;/p&gt;

&lt;p&gt;To address these, and other concerns, a new traffic management API, a.k.a. &lt;code&gt;v1alpha3&lt;/code&gt;, is being introduced, which will
completely replace the previous API going forward. Although the &lt;code&gt;v1alpha3&lt;/code&gt; model is fundamentally the same, it is not
backward compatible and will require manual conversion from the old API.&lt;/p&gt;

&lt;p&gt;To justify this disruption, the &lt;code&gt;v1alpha3&lt;/code&gt; API has gone through a long and painstaking community
review process that has hopefully resulted in a greatly improved API that will stand the test of time. In this article,
we will introduce the new configuration model and attempt to explain some of the motivation and design principles that
influenced it.&lt;/p&gt;

&lt;h2 id=&#34;design-principles&#34;&gt;Design principles&lt;/h2&gt;

&lt;p&gt;A few key design principles played a role in the routing model redesign:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explicitly model infrastructure as well as intent. For example, in addition to configuring an ingress gateway, the
component (controller) implementing it can also be specified.&lt;/li&gt;
&lt;li&gt;The authoring model should be &amp;ldquo;producer oriented&amp;rdquo; and &amp;ldquo;host centric&amp;rdquo; as opposed to compositional. For example, all
rules associated with a particular host are configured together, instead of individually.&lt;/li&gt;
&lt;li&gt;Clear separation of routing from post-routing behaviors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-resources-in-v1alpha3&#34;&gt;Configuration resources in v1alpha3&lt;/h2&gt;

&lt;p&gt;A typical mesh will have one or more load balancers (we call them gateways)
that terminate TLS from external networks and allow traffic into the mesh.
Traffic then flows through internal services via sidecar gateways.
It is also common for applications to consume external
services (e.g., Google Maps API). These may be called directly or, in certain deployments, all traffic
exiting the mesh may be forced through dedicated egress gateways. The following diagram depicts
this mental model.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 35.20%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/v1alpha3-routing/./gateways.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/v1alpha3-routing/./gateways.svg&#34; alt=&#34;Role of gateways in the mesh&#34; title=&#34;Gateways in an Istio service mesh&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Gateways in an Istio service mesh&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;With the above setup in mind, &lt;code&gt;v1alpha3&lt;/code&gt; introduces the following new
configuration resources to control traffic routing into, within, and out of the mesh.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VirtualService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DestinationRule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt;, &lt;code&gt;DestinationRule&lt;/code&gt;, and &lt;code&gt;ServiceEntry&lt;/code&gt; replace &lt;code&gt;RouteRule&lt;/code&gt;,
&lt;code&gt;DestinationPolicy&lt;/code&gt;, and &lt;code&gt;EgressRule&lt;/code&gt; respectively. The &lt;code&gt;Gateway&lt;/code&gt; is a
platform independent abstraction to model the traffic flowing into
dedicated middleboxes.&lt;/p&gt;

&lt;p&gt;The figure below depicts the flow of control across configuration
resources.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 41.16%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/v1alpha3-routing/./virtualservices-destrules.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/v1alpha3-routing/./virtualservices-destrules.svg&#34; alt=&#34;Relationship between different v1alpha3 elements&#34; title=&#34;Relationship between different v1alpha3 elements&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Relationship between different v1alpha3 elements&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;gateway&#34;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#Gateway&#34;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/a&gt;
configures a load balancer for HTTP/TCP traffic, regardless of
where it will be running.  Any number of gateways can exist within the mesh
and multiple different gateway implementations can co-exist. In fact, a
gateway configuration can be bound to a particular workload by specifying
the set of workload (pod) labels as part of the configuration, allowing
users to reuse off the shelf network appliances by writing a simple gateway
controller.&lt;/p&gt;

&lt;p&gt;For ingress traffic management, you might ask: &lt;em&gt;Why not reuse Kubernetes Ingress APIs&lt;/em&gt;?
The Ingress APIs proved to be incapable of expressing Istio&amp;rsquo;s routing needs.
By trying to draw a common denominator across different HTTP proxies, the
Ingress is only able to support the most basic HTTP routing and ends up
pushing every other feature of modern proxies into non-portable
annotations.&lt;/p&gt;

&lt;p&gt;Istio &lt;code&gt;Gateway&lt;/code&gt; overcomes the &lt;code&gt;Ingress&lt;/code&gt; shortcomings by separating the
L4-L6 spec from L7. It only configures the L4-L6 functions (e.g., ports to
expose, TLS configuration) that are uniformly implemented by all good L7
proxies. Users can then use standard Istio rules to control HTTP
requests as well as TCP traffic entering a &lt;code&gt;Gateway&lt;/code&gt; by binding a
&lt;code&gt;VirtualService&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;For example, the following simple &lt;code&gt;Gateway&lt;/code&gt; configures a load balancer
to allow external https traffic for host &lt;code&gt;bookinfo.com&lt;/code&gt; into the mesh:&lt;/p&gt;


































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: bookinfo-gateway
spec:
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - bookinfo.com
    tls:
      mode: SIMPLE
      serverCertificate: /tmp/tls.crt
      privateKey: /tmp/tls.key&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;To configure the corresponding routes, a &lt;code&gt;VirtualService&lt;/code&gt; (described in the &lt;a href=&#34;#virtualservice&#34;&gt;following section&lt;/a&gt;)
must be defined for the same host and bound to the &lt;code&gt;Gateway&lt;/code&gt; using
the &lt;code&gt;gateways&lt;/code&gt; field in the configuration:&lt;/p&gt;





























































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
    - bookinfo.com
  gateways:
  - bookinfo-gateway # &amp;lt;---- bind to gateway
  http:
  - match:
    - uri:
        prefix: /reviews
    route:
    ...&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The &lt;code&gt;Gateway&lt;/code&gt; can be used to model an edge-proxy or a purely internal proxy
as shown in the first figure. Irrespective of the location, all gateways
can be configured and controlled in the same way.&lt;/p&gt;

&lt;h3 id=&#34;virtualservice&#34;&gt;&lt;code&gt;VirtualService&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Replacing route rules with something called &amp;ldquo;virtual services” might seem peculiar at first, but in reality it’s
fundamentally a much better name for what is being configured, especially after redesigning the API to address the
scalability issues with the previous model.&lt;/p&gt;

&lt;p&gt;In effect, what has changed is that instead of configuring routing using a set of individual configuration resources
(rules) for a particular destination service, each containing a precedence field to control the order of evaluation, we
now configure the (virtual) destination itself, with all of its rules in an ordered list within a corresponding
&lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#VirtualService&#34;&gt;&lt;code&gt;VirtualService&lt;/code&gt;&lt;/a&gt; resource.
For example, where previously we had two &lt;code&gt;RouteRule&lt;/code&gt; resources for the
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt; application’s &lt;code&gt;reviews&lt;/code&gt; service, like this:&lt;/p&gt;






























































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
  name: reviews-default
spec:
  destination:
    name: reviews
  precedence: 1
  route:
  - labels:
      version: v1
---
apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
  name: reviews-test-v2
spec:
  destination:
    name: reviews
  precedence: 2
  match:
    request:
      headers:
        cookie:
          regex: &amp;#34;^(.*?;)?(user=jason)(;.*)?$&amp;#34;
  route:
  - labels:
      version: v2&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;In &lt;code&gt;v1alpha3&lt;/code&gt;, we provide the same configuration in a single &lt;code&gt;VirtualService&lt;/code&gt; resource:&lt;/p&gt;






















































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - match:
    - headers:
        cookie:
          regex: &amp;#34;^(.*?;)?(user=jason)(;.*)?$&amp;#34;
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;As you can see, both of the rules for the &lt;code&gt;reviews&lt;/code&gt; service are consolidated in one place, which at first may or may not
seem preferable. However, if you look closer at this new model, you’ll see there are fundamental differences that make
&lt;code&gt;v1alpha3&lt;/code&gt; vastly more functional.&lt;/p&gt;

&lt;p&gt;First of all, notice that the destination service for the &lt;code&gt;VirtualService&lt;/code&gt; is specified using a &lt;code&gt;hosts&lt;/code&gt; field (repeated field, in fact) and is then again specified in a &lt;code&gt;destination&lt;/code&gt; field of each of the route specifications. This is a
very important difference from the previous model.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;VirtualService&lt;/code&gt; describes the mapping between one or more user-addressable destinations to the actual destination workloads inside the mesh. In our example, they are the same, however, the user-addressed hosts can be any DNS
names with optional wildcard prefix or CIDR prefix that will be used to address the service. This can be particularly
useful in facilitating turning monoliths into a composite service built out of distinct microservices without requiring the
consumers of the service to adapt to the transition.&lt;/p&gt;

&lt;p&gt;For example, the following rule allows users to address both the &lt;code&gt;reviews&lt;/code&gt; and &lt;code&gt;ratings&lt;/code&gt; services of the Bookinfo application
as if they are parts of a bigger (virtual) service at &lt;code&gt;http://bookinfo.com/&lt;/code&gt;:&lt;/p&gt;



























































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
    - bookinfo.com
  http:
  - match:
    - uri:
        prefix: /reviews
    route:
    - destination:
        host: reviews
  - match:
    - uri:
        prefix: /ratings
    route:
    - destination:
        host: ratings
  ...&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The hosts of a &lt;code&gt;VirtualService&lt;/code&gt; do not actually have to be part of the service registry, they are simply virtual
destinations. This allows users to model traffic for virtual hosts that do not have routable entries inside the mesh.
These hosts can be exposed outside the mesh by binding the &lt;code&gt;VirtualService&lt;/code&gt; to a &lt;code&gt;Gateway&lt;/code&gt; configuration for the same host
(as described in the &lt;a href=&#34;#gateway&#34;&gt;previous section&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In addition to this fundamental restructuring, &lt;code&gt;VirtualService&lt;/code&gt; includes several other important changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Multiple match conditions can be expressed inside the &lt;code&gt;VirtualService&lt;/code&gt; configuration, reducing the need for redundant
rules.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each service version has a name (called a service subset). The set of pods/VMs belonging to a subset is defined in a
&lt;code&gt;DestinationRule&lt;/code&gt;, described in the following section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt; hosts can be specified using wildcard DNS prefixes to create a single rule for all matching services.
For example, in Kubernetes, to apply the same rewrite rule for all services in the &lt;code&gt;foo&lt;/code&gt; namespace, the &lt;code&gt;VirtualService&lt;/code&gt;
would use &lt;code&gt;*.foo.svc.cluster.local&lt;/code&gt; as the host.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;destinationrule&#34;&gt;&lt;code&gt;DestinationRule&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#DestinationRule&#34;&gt;&lt;code&gt;DestinationRule&lt;/code&gt;&lt;/a&gt;
configures the set of policies to be applied while forwarding traffic to a service. They are
intended to be authored by service owners, describing the circuit breakers, load balancer settings, TLS settings, etc..
&lt;code&gt;DestinationRule&lt;/code&gt; is more or less the same as its predecessor, &lt;code&gt;DestinationPolicy&lt;/code&gt;, with the following exceptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;host&lt;/code&gt; of a &lt;code&gt;DestinationRule&lt;/code&gt; can include wildcard prefixes, allowing a single rule to be specified for many actual
services.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; defines addressable &lt;code&gt;subsets&lt;/code&gt; (i.e., named versions) of the corresponding destination host. These
subsets are used in &lt;code&gt;VirtualService&lt;/code&gt; route specifications when sending traffic to specific versions of the service.
Naming versions this way allows us to cleanly refer to them across different virtual services, simplify the stats that
Istio proxies emit, and to encode subsets in SNI headers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; that configures policies and subsets for the reviews service might look something like this:&lt;/p&gt;
































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: reviews
spec:
  host: reviews
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
  - name: v3
    labels:
      version: v3&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Notice that, unlike &lt;code&gt;DestinationPolicy&lt;/code&gt;, multiple policies (e.g., default and v2-specific) are specified in a single
&lt;code&gt;DestinationRule&lt;/code&gt; configuration.&lt;/p&gt;

&lt;h3 id=&#34;serviceentry&#34;&gt;&lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry&#34;&gt;&lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/a&gt;
is used to add additional entries into the service registry that Istio maintains internally.
It is most commonly used to allow one to model traffic to external dependencies of the mesh
such as APIs consumed from the web or traffic to services in legacy infrastructure.&lt;/p&gt;

&lt;p&gt;Everything you could previously configure using an &lt;code&gt;EgressRule&lt;/code&gt; can just as easily be done with a &lt;code&gt;ServiceEntry&lt;/code&gt;.
For example, access to a simple external service from inside the mesh can be enabled using a configuration
something like this:&lt;/p&gt;









































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: foo-ext
spec:
  hosts:
  - foo.com
  ports:
  - number: 80
    name: http
    protocol: HTTP&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;That said, &lt;code&gt;ServiceEntry&lt;/code&gt; has significantly more functionality than its predecessor.
First of all, a &lt;code&gt;ServiceEntry&lt;/code&gt; is not limited to external service configuration,
it can be of two types: mesh-internal or mesh-external.
Mesh-internal entries are like all other internal services but are used to explicitly add services
to the mesh. They can be used to add services as part of expanding the service mesh to include unmanaged infrastructure
(e.g., VMs added to a Kubernetes-based service mesh).
Mesh-external entries represent services external to the mesh.
For them, mutual TLS authentication is disabled and policy enforcement is performed on the client-side,
instead of on the usual server-side for internal service requests.&lt;/p&gt;

&lt;p&gt;Because a &lt;code&gt;ServiceEntry&lt;/code&gt; configuration simply adds a destination to the internal service registry, it can be
used in conjunction with a &lt;code&gt;VirtualService&lt;/code&gt; and/or &lt;code&gt;DestinationRule&lt;/code&gt;, just like any other service in the registry.
The following &lt;code&gt;DestinationRule&lt;/code&gt;, for example, can be used to initiate mutual TLS connections for an external service:&lt;/p&gt;














































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: foo-ext
spec:
  host: foo.com
  trafficPolicy:
    tls:
      mode: MUTUAL
      clientCertificate: /etc/certs/myclientcert.pem
      privateKey: /etc/certs/client_private_key.pem
      caCertificates: /etc/certs/rootcacerts.pem&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;In addition to its expanded generality, &lt;code&gt;ServiceEntry&lt;/code&gt; provides several other improvements over &lt;code&gt;EgressRule&lt;/code&gt;
including the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A single &lt;code&gt;ServiceEntry&lt;/code&gt; can configure multiple service endpoints, which previously would have required multiple
&lt;code&gt;EgressRules&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The resolution mode for the endpoints is now configurable (&lt;code&gt;NONE&lt;/code&gt;, &lt;code&gt;STATIC&lt;/code&gt;, or &lt;code&gt;DNS&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Additionally, we are working on addressing another pain point: the need to access secure external services over plain
text ports (e.g., &lt;code&gt;http://google.com:443&lt;/code&gt;). This should be fixed in the coming weeks, allowing you to directly access
&lt;code&gt;https://google.com&lt;/code&gt; from your application. Stay tuned for an Istio patch release (0.8.x) that addresses this limitation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-and-deleting-v1alpha3-route-rules&#34;&gt;Creating and deleting v1alpha3 route rules&lt;/h2&gt;

&lt;p&gt;Because all route rules for a given destination are now stored together as an ordered
list in a single &lt;code&gt;VirtualService&lt;/code&gt; resource, adding a second and subsequent rules for a particular destination
is no longer done by creating a new (&lt;code&gt;RouteRule&lt;/code&gt;) resource, but instead by updating the one-and-only &lt;code&gt;VirtualService&lt;/code&gt;
resource for the destination.&lt;/p&gt;

&lt;p&gt;old routing rules:&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f my-second-rule-for-destination-abc.yaml&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;code&gt;v1alpha3&lt;/code&gt; routing rules:&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f my-updated-rules-for-destination-abc.yaml&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Deleting route rules other than the last one for a particular destination is also done using &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When adding or removing routes that refer to service versions, the &lt;code&gt;subsets&lt;/code&gt; will need to be updated in
the service&amp;rsquo;s corresponding &lt;code&gt;DestinationRule&lt;/code&gt;.
As you might have guessed, this is also done using &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The Istio &lt;code&gt;v1alpha3&lt;/code&gt; routing API has significantly more functionality than
its predecessor, but unfortunately is not backwards compatible, requiring a
one time manual conversion.  The previous configuration resources,
&lt;code&gt;RouteRule&lt;/code&gt;, &lt;code&gt;DesintationPolicy&lt;/code&gt;, and &lt;code&gt;EgressRule&lt;/code&gt;, will not be supported
from Istio 0.9 onwards. Kubernetes users can continue to use &lt;code&gt;Ingress&lt;/code&gt; to
configure their edge load balancers for basic routing. However, advanced
routing features (e.g., traffic split across two versions) will require use
of &lt;code&gt;Gateway&lt;/code&gt;, a significantly more functional and highly
recommended &lt;code&gt;Ingress&lt;/code&gt; replacement.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;Credit for the routing model redesign and implementation work goes to the
following people (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frank Budinsky (IBM)&lt;/li&gt;
&lt;li&gt;Zack Butcher (Google)&lt;/li&gt;
&lt;li&gt;Greg Hanson (IBM)&lt;/li&gt;
&lt;li&gt;Costin Manolache (Google)&lt;/li&gt;
&lt;li&gt;Martin Ostrowski (Google)&lt;/li&gt;
&lt;li&gt;Shriram Rajagopalan (VMware)&lt;/li&gt;
&lt;li&gt;Louis Ryan (Google)&lt;/li&gt;
&lt;li&gt;Isaiah Snell-Feikema (IBM)&lt;/li&gt;
&lt;li&gt;Kuat Yessenov (Google)&lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/v1alpha3-routing/</link>
          <author>Frank Budinsky (IBM) and Shriram Rajagopalan (VMware)</author>
          <guid isPermaLink="true">/en/blog/2018/v1alpha3-routing/</guid>

          
              <category>traffic-management</category>
          
        </item>
      
    
      
        <item>
          <title>Configuring Istio Ingress with AWS NLB</title>
          <description>

&lt;p&gt;This post provides instructions to use and configure ingress Istio with &lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html&#34;&gt;AWS Network Load Balancer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Network load balancer (NLB) could be used instead of classical load balancer. You can see the &lt;a href=&#34;https://aws.amazon.com/elasticloadbalancing/details/#compare&#34;&gt;comparison&lt;/a&gt; between different AWS &lt;code&gt;loadbalancer&lt;/code&gt; for more explanation.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;The following instructions require a Kubernetes &lt;strong&gt;1.9.0 or newer&lt;/strong&gt; cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/exclamation-mark.svg&#34; alt=&#34;Warning&#34; title=&#34;Warning&#34; style=&#34;width: 2rem; height: 2rem; display:inline&#34; /&gt; Usage of AWS &lt;code&gt;nlb&lt;/code&gt; on Kubernetes is an Alpha feature and not recommended for production clusters.&lt;/p&gt;

&lt;h2 id=&#34;iam-policy&#34;&gt;IAM Policy&lt;/h2&gt;

&lt;p&gt;You need to apply policy on the master role in order to be able to provision network load balancer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In AWS &lt;code&gt;iam&lt;/code&gt; console click on policies and click on create a new one:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 60%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/aws-nlb/./createpolicystart.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/aws-nlb/./createpolicystart.png&#34; alt=&#34;Create a new policy&#34; title=&#34;Create a new policy&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Create a new policy&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;code&gt;json&lt;/code&gt;:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 60%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/aws-nlb/./createpolicyjson.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/aws-nlb/./createpolicyjson.png&#34; alt=&#34;Select json&#34; title=&#34;Select json&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Select json&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy/paste text below:&lt;/p&gt;










































































































































































































&lt;pre&gt;&lt;code class=&#39;language-json&#39;&gt;{
    &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
    &amp;#34;Statement&amp;#34;: [
        {
            &amp;#34;Sid&amp;#34;: &amp;#34;kopsK8sNLBMasterPermsRestrictive&amp;#34;,
            &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
            &amp;#34;Action&amp;#34;: [
                &amp;#34;ec2:DescribeVpcs&amp;#34;,
                &amp;#34;elasticloadbalancing:AddTags&amp;#34;,
                &amp;#34;elasticloadbalancing:CreateListener&amp;#34;,
                &amp;#34;elasticloadbalancing:CreateTargetGroup&amp;#34;,
                &amp;#34;elasticloadbalancing:DeleteListener&amp;#34;,
                &amp;#34;elasticloadbalancing:DeleteTargetGroup&amp;#34;,
                &amp;#34;elasticloadbalancing:DescribeListeners&amp;#34;,
                &amp;#34;elasticloadbalancing:DescribeLoadBalancerPolicies&amp;#34;,
                &amp;#34;elasticloadbalancing:DescribeTargetGroups&amp;#34;,
                &amp;#34;elasticloadbalancing:DescribeTargetHealth&amp;#34;,
                &amp;#34;elasticloadbalancing:ModifyListener&amp;#34;,
                &amp;#34;elasticloadbalancing:ModifyTargetGroup&amp;#34;,
                &amp;#34;elasticloadbalancing:RegisterTargets&amp;#34;,
                &amp;#34;elasticloadbalancing:SetLoadBalancerPoliciesOfListener&amp;#34;
            ],
            &amp;#34;Resource&amp;#34;: [
                &amp;#34;*&amp;#34;
            ]
        },
        {
            &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
            &amp;#34;Action&amp;#34;: [
                &amp;#34;ec2:DescribeVpcs&amp;#34;,
                &amp;#34;ec2:DescribeRegions&amp;#34;
            ],
            &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click review policy, fill all fields and click create policy:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 60%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/aws-nlb/./create_policy.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/aws-nlb/./create_policy.png&#34; alt=&#34;Validate policy&#34; title=&#34;Validate policy&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Validate policy&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on roles, select you master role nodes, and click attach policy:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 35%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/aws-nlb/./roles_summary.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/aws-nlb/./roles_summary.png&#34; alt=&#34;Attach policy&#34; title=&#34;Attach policy&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Attach policy&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your policy is now attach to your master node.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;rewrite-istio-ingress-service&#34;&gt;Rewrite Istio Ingress Service&lt;/h2&gt;

&lt;p&gt;You need to rewrite ingress service with the following:&lt;/p&gt;





































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: v1
kind: Service
metadata:
  name: istio-ingress
  namespace: istio-system
  labels:
    istio: ingress
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: &amp;#34;nlb&amp;#34;
spec:
  externalTrafficPolicy: Local
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    name: http
  - port: 443
    protocol: TCP
    targetPort: 443
    name: https
  selector:
    istio: ingress
  type: LoadBalancer&lt;/code&gt;&lt;/pre&gt;






</description>
          <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/aws-nlb/</link>
          <author>Julien SENON</author>
          <guid isPermaLink="true">/en/blog/2018/aws-nlb/</guid>

          
              <category>ingress</category>
          
              <category>traffic-management</category>
          
              <category>aws</category>
          
        </item>
      
    
      
        <item>
          <title>Istio Soft Multi-tenancy Support</title>
          <description>

&lt;p&gt;Multi-tenancy is commonly used in many environments across many different applications,
but the implementation details and functionality provided on a per tenant basis does not
follow one model in all environments.  The &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/wg-multitenancy/README.md&#34;&gt;Kubernetes multi-tenancy working group&lt;/a&gt;
is working to define the multi-tenant use cases and functionality that should be available
within Kubernetes. However, from their work so far it is clear that only &amp;ldquo;soft multi-tenancy&amp;rdquo;
is possible due to the inability to fully protect against malicious containers or workloads
gaining access to other tenant&amp;rsquo;s pods or kernel resources.&lt;/p&gt;

&lt;h2 id=&#34;soft-multi-tenancy&#34;&gt;Soft multi-tenancy&lt;/h2&gt;

&lt;p&gt;For this blog, &amp;ldquo;soft multi-tenancy&amp;rdquo; is defined as having a single Kubernetes control plane
with multiple Istio control planes and multiple meshes, one control plane and one mesh
per tenant. The cluster administrator gets control and visibility across all the Istio
control planes, while the tenant administrator only gets control of a specific Istio
instance. Separation between the tenants is provided by Kubernetes namespaces and RBAC.&lt;/p&gt;

&lt;p&gt;One use case for this deployment model is a shared corporate infrastructure where malicious
actions are not expected, but a clean separation of the tenants is still required.&lt;/p&gt;

&lt;p&gt;Potential future Istio multi-tenant deployment models are described at the bottom of this
blog.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This blog is a high-level description of how to deploy Istio in a
limited multi-tenancy environment. The &lt;a href=&#34;/docs/&#34;&gt;docs&lt;/a&gt; section will be updated
when official multi-tenancy support is provided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;

&lt;h3 id=&#34;multiple-istio-control-planes&#34;&gt;Multiple Istio control planes&lt;/h3&gt;

&lt;p&gt;Deploying multiple Istio control planes starts by replacing all &lt;code&gt;namespace&lt;/code&gt; references
in a manifest file with the desired namespace. Using &lt;code&gt;istio.yaml&lt;/code&gt; as an example, if two tenant
level Istio control planes are required; the first can use the &lt;code&gt;istio.yaml&lt;/code&gt; default name of
&lt;em&gt;istio-system&lt;/em&gt; and a second control plane can be created by generating a new yaml file with
a different namespace. As an example, the following command creates a yaml file with
the Istio namespace of &lt;em&gt;istio-system1&lt;/em&gt;.&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ cat istio.yaml | sed s/istio-system/istio-system1/g &amp;gt; istio-system1.yaml&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The istio yaml file contains the details of the Istio control plane deployment, including the
pods that make up the control plane (mixer, pilot, ingress, CA). Deploying the two Istio
control plane yaml files:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f install/kubernetes/istio.yaml
$ kubectl apply -f install/kubernetes/istio-system1.yaml&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Results in two Istio control planes running in two namespaces.&lt;/p&gt;










































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods --all-namespaces
NAMESPACE       NAME                                       READY     STATUS    RESTARTS   AGE
istio-system    istio-ca-ffbb75c6f-98w6x                   1/1       Running   0          15d
istio-system    istio-ingress-68d65fc5c6-dnvfl             1/1       Running   0          15d
istio-system    istio-mixer-5b9f8dffb5-8875r               3/3       Running   0          15d
istio-system    istio-pilot-678fc976c8-b8tv6               2/2       Running   0          15d
istio-system1   istio-ca-5f496fdbcd-lqhlk                  1/1       Running   0          15d
istio-system1   istio-ingress-68d65fc5c6-2vldg             1/1       Running   0          15d
istio-system1   istio-mixer-7d4f7b9968-66z44               3/3       Running   0          15d
istio-system1   istio-pilot-5bb6b7669c-779vb               2/2       Running   0          15d&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The Istio &lt;a href=&#34;/docs/setup/kubernetes/sidecar-injection/&#34;&gt;sidecar&lt;/a&gt; and
&lt;a href=&#34;/docs/tasks/telemetry/&#34;&gt;addons&lt;/a&gt;, if required, manifests must also
be deployed to match the configured &lt;code&gt;namespace&lt;/code&gt; in use by the tenant&amp;rsquo;s Istio control plane.&lt;/p&gt;

&lt;p&gt;The execution of these two yaml files is the responsibility of the cluster
administrator, not the tenant level administrator. Additional RBAC restrictions will also
need to be configured and applied by the cluster administrator, limiting the tenant
administrator to only the assigned namespace.&lt;/p&gt;

&lt;h3 id=&#34;split-common-and-namespace-specific-resources&#34;&gt;Split common and namespace specific resources&lt;/h3&gt;

&lt;p&gt;The manifest files in the Istio repositories create both common resources that would
be used by all Istio control planes as well as resources that are replicated per control
plane. Although it is a simple matter to deploy multiple control planes by replacing the
&lt;em&gt;istio-system&lt;/em&gt; namespace references as described above, a better approach is to split the
manifests into a common part that is deployed once for all tenants and a tenant
specific part. For the &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions&#34;&gt;Custom Resource Definitions&lt;/a&gt;, the roles and the role
bindings should be separated out from the provided Istio manifests.  Additionally, the
roles and role bindings in the provided Istio manifests are probably unsuitable for a
multi-tenant environment and should be modified or augmented as described in the next
section.&lt;/p&gt;

&lt;h3 id=&#34;kubernetes-rbac-for-istio-control-plane-resources&#34;&gt;Kubernetes RBAC for Istio control plane resources&lt;/h3&gt;

&lt;p&gt;To restrict a tenant administrator to a single Istio namespace, the cluster
administrator would create a manifest containing, at a minimum, a &lt;code&gt;Role&lt;/code&gt; and &lt;code&gt;RoleBinding&lt;/code&gt;
similar to the one below. In this example, a tenant administrator named &lt;em&gt;sales-admin&lt;/em&gt;
is limited to the namespace &lt;em&gt;istio-system1&lt;/em&gt;. A completed manifest would contain many
more &lt;code&gt;apiGroups&lt;/code&gt; under the &lt;code&gt;Role&lt;/code&gt; providing resource access to the tenant administrator.&lt;/p&gt;





































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: istio-system1
  name: ns-access-for-sales-admin-istio-system1
rules:
- apiGroups: [&amp;#34;&amp;#34;] # &amp;#34;&amp;#34; indicates the core API group
  resources: [&amp;#34;*&amp;#34;]
  verbs: [&amp;#34;*&amp;#34;]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: access-all-istio-system1
  namespace: istio-system1
subjects:
- kind: User
  name: sales-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: ns-access-for-sales-admin-istio-system1
  apiGroup: rbac.authorization.k8s.io&lt;/code&gt;&lt;/pre&gt;







&lt;h3 id=&#34;watching-specific-namespaces-for-service-discovery&#34;&gt;Watching specific namespaces for service discovery&lt;/h3&gt;

&lt;p&gt;In addition to creating RBAC rules limiting the tenant administrator&amp;rsquo;s access to a specific
Istio control plane, the Istio manifest must be updated to specify the application namespace
that Pilot should watch for creation of its xDS cache. This is done by starting the Pilot
component with the additional command line arguments &lt;code&gt;--appNamespace, ns-1&lt;/code&gt;.  Where &lt;em&gt;ns-1&lt;/em&gt;
is the namespace that the tenant’s application will be deployed in. An example snippet from
the istio-system1.yaml file is included below.&lt;/p&gt;





































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: istio-system1
  annotations:
    sidecar.istio.io/inject: &amp;#34;false&amp;#34;
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: pilot
    spec:
      serviceAccountName: istio-pilot-service-account
      containers:
      - name: discovery
        image: docker.io/&amp;lt;user ID&amp;gt;/pilot:&amp;lt;tag&amp;gt;
        imagePullPolicy: IfNotPresent
        args: [&amp;#34;discovery&amp;#34;, &amp;#34;-v&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;--admission-service&amp;#34;, &amp;#34;istio-pilot&amp;#34;, &amp;#34;--appNamespace&amp;#34;, &amp;#34;ns-1&amp;#34;]
        ports:
        - containerPort: 8080
        - containerPort: 443&lt;/code&gt;&lt;/pre&gt;







&lt;h3 id=&#34;deploying-the-tenant-application-in-a-namespace&#34;&gt;Deploying the tenant application in a namespace&lt;/h3&gt;

&lt;p&gt;Now that the cluster administrator has created the tenant&amp;rsquo;s namespace (ex. &lt;em&gt;istio-system1&lt;/em&gt;) and
Pilot&amp;rsquo;s service discovery has been configured to watch for a specific application
namespace (ex. &lt;em&gt;ns-1&lt;/em&gt;), create the application manifests to deploy in that tenant&amp;rsquo;s specific
namespace. For example:&lt;/p&gt;






































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: v1
kind: Namespace
metadata:
  name: ns-1&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;And add the namespace reference to each resource type included in the application&amp;rsquo;s manifest
file.  For example:&lt;/p&gt;





















































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: v1
kind: Service
metadata:
  name: details
  labels:
    app: details
  namespace: ns-1&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Although not shown, the application namespaces will also have RBAC settings limiting access
to certain resources. These RBAC settings could be set by the cluster administrator and/or
the tenant administrator.&lt;/p&gt;

&lt;h3 id=&#34;using-kubectl-in-a-multi-tenant-environment&#34;&gt;Using &lt;code&gt;kubectl&lt;/code&gt; in a multi-tenant environment&lt;/h3&gt;

&lt;p&gt;When defining &lt;a href=&#34;https://archive.istio.io/v0.7/docs/reference/config/istio.routing.v1alpha1/#RouteRule&#34;&gt;route rules&lt;/a&gt;
or &lt;a href=&#34;https://archive.istio.io/v0.7/docs/reference/config/istio.routing.v1alpha1/#DestinationPolicy&#34;&gt;destination policies&lt;/a&gt;,
it is necessary to ensure that the &lt;code&gt;kubectl&lt;/code&gt; command is scoped to
the namespace the Istio control plane is running in to ensure the resource is created
in the proper namespace. Additionally, the rule itself must be scoped to the tenant&amp;rsquo;s namespace
so that it will be applied properly to that tenant&amp;rsquo;s mesh.  The &lt;em&gt;-i&lt;/em&gt; option is used to create
(or get or describe) the rule in the namespace that the Istio control plane is deployed in.
The &lt;em&gt;-n&lt;/em&gt; option will scope the rule to the tenant&amp;rsquo;s mesh and should be set to the namespace that
the tenant&amp;rsquo;s app is deployed in. Note that the &lt;em&gt;-n&lt;/em&gt; option can be skipped on the command line if
the .yaml file for the resource scopes it properly instead.&lt;/p&gt;

&lt;p&gt;For example, the following command would be required to add a route rule to the &lt;em&gt;istio-system1&lt;/em&gt;
namespace:&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl –i istio-system1 apply -n ns-1 -f route_rule_v2.yaml&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;And can be displayed using the command:&lt;/p&gt;






















































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl -i istio-system1 -n ns-1 get routerule
NAME                  KIND                                  NAMESPACE
details-Default       RouteRule.v1alpha2.config.istio.io    ns-1
productpage-default   RouteRule.v1alpha2.config.istio.io    ns-1
ratings-default       RouteRule.v1alpha2.config.istio.io    ns-1
reviews-default       RouteRule.v1alpha2.config.istio.io    ns-1&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;See the &lt;a href=&#34;/blog/2018/soft-multitenancy/#multiple-istio-control-planes&#34;&gt;Multiple Istio control planes&lt;/a&gt; section of this document for more details on &lt;code&gt;namespace&lt;/code&gt; requirements in a
multi-tenant environment.&lt;/p&gt;

&lt;h3 id=&#34;test-results&#34;&gt;Test results&lt;/h3&gt;

&lt;p&gt;Following the instructions above, a cluster administrator can create an environment limiting,
via RBAC and namespaces, what a tenant administrator can deploy.&lt;/p&gt;

&lt;p&gt;After deployment, accessing the Istio control plane pods assigned to a specific tenant
administrator is permitted:&lt;/p&gt;










































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods -n istio-system
NAME                                      READY     STATUS    RESTARTS   AGE
grafana-78d649479f-8pqk9                  1/1       Running   0          1d
istio-ca-ffbb75c6f-98w6x                  1/1       Running   0          1d
istio-ingress-68d65fc5c6-dnvfl            1/1       Running   0          1d
istio-mixer-5b9f8dffb5-8875r              3/3       Running   0          1d
istio-pilot-678fc976c8-b8tv6              2/2       Running   0          1d
istio-sidecar-injector-7587bd559d-5tgk6   1/1       Running   0          1d
prometheus-cf8456855-hdcq7                1/1       Running   0          1d
servicegraph-75ff8f7c95-wcjs7             1/1       Running   0          1d&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;However, accessing all the cluster&amp;rsquo;s pods is not permitted:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods --all-namespaces
Error from server (Forbidden): pods is forbidden: User &amp;#34;dev-admin&amp;#34; cannot list pods at the cluster scope&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;And neither is accessing another tenant&amp;rsquo;s namespace:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods -n istio-system1
Error from server (Forbidden): pods is forbidden: User &amp;#34;dev-admin&amp;#34; cannot list pods in the namespace &amp;#34;istio-system1&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The tenant administrator can deploy applications in the application namespace configured for
that tenant. As an example, updating the &lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt;
manifests and then deploying under the tenant&amp;rsquo;s application namespace of &lt;em&gt;ns-0&lt;/em&gt;, listing the
pods in use by this tenant&amp;rsquo;s namespace is permitted:&lt;/p&gt;
































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods -n ns-0
NAME                              READY     STATUS    RESTARTS   AGE
details-v1-64b86cd49-b7rkr        2/2       Running   0          1d
productpage-v1-84f77f8747-rf2mt   2/2       Running   0          1d
ratings-v1-5f46655b57-5b4c5       2/2       Running   0          1d
reviews-v1-ff6bdb95b-pm5lb        2/2       Running   0          1d
reviews-v2-5799558d68-b989t       2/2       Running   0          1d
reviews-v3-58ff7d665b-lw5j9       2/2       Running   0          1d&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;But accessing another tenant&amp;rsquo;s application namespace is not:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods -n ns-1
Error from server (Forbidden): pods is forbidden: User &amp;#34;dev-admin&amp;#34; cannot list pods in the namespace &amp;#34;ns-1&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;If the &lt;a href=&#34;/docs/tasks/telemetry/&#34;&gt;add-on tools&lt;/a&gt;, example
&lt;a href=&#34;/docs/tasks/telemetry/querying-metrics/&#34;&gt;Prometheus&lt;/a&gt;, are deployed
(also limited by an Istio &lt;code&gt;namespace&lt;/code&gt;) the statistical results returned would represent only
that traffic seen from that tenant&amp;rsquo;s application namespace.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The evaluation performed indicates Istio has sufficient capabilities and security to meet a
small number of multi-tenant use cases. It also shows that Istio and Kubernetes &lt;strong&gt;cannot&lt;/strong&gt;
provide sufficient capabilities and security for other use cases, especially those use
cases that require complete security and isolation between untrusted tenants. The improvements
required to reach a more secure model of security and isolation require work in container
technology, ex. Kubernetes, rather than improvements in Istio capabilities.&lt;/p&gt;

&lt;h2 id=&#34;issues&#34;&gt;Issues&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The CA (Certificate Authority) and mixer Istio pod logs from one tenant&amp;rsquo;s Istio control
plane (ex. &lt;em&gt;istio-system&lt;/em&gt; &lt;code&gt;namespace&lt;/code&gt;) contained &amp;lsquo;info&amp;rsquo; messages from a second tenant&amp;rsquo;s
Istio control plane (ex &lt;em&gt;istio-system1&lt;/em&gt; &lt;code&gt;namespace&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;challenges-with-other-multi-tenancy-models&#34;&gt;Challenges with other multi-tenancy models&lt;/h2&gt;

&lt;p&gt;Other multi-tenancy deployment models were considered:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A single mesh with multiple applications, one for each tenant on the mesh. The cluster
administrator gets control and visibility mesh wide and across all applications, while the
tenant administrator only gets control of a specific application.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A single Istio control plane with multiple meshes, one mesh per tenant. The cluster
administrator gets control and visibility across the entire Istio control plane and all
meshes, while the tenant administrator only gets control of a specific mesh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A single cloud environment (cluster controlled), but multiple Kubernetes control planes
(tenant controlled).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These options either can&amp;rsquo;t be properly supported without code changes or don&amp;rsquo;t fully
address the use cases.&lt;/p&gt;

&lt;p&gt;Current Istio capabilities are poorly suited to support the first model as it lacks
sufficient RBAC capabilities to support cluster versus tenant operations. Additionally,
having multiple tenants under one mesh is too insecure with the current mesh model and the
way Istio drives configuration to the envoy proxies.&lt;/p&gt;

&lt;p&gt;Regarding the second option, the current Istio paradigm assumes a single mesh per Istio control
plane. The needed changes to support this model are substantial. They would require
finer grained scoping of resources and security domains based on namespaces, as well as,
additional Istio RBAC changes. This model will likely be addressed by future work, but not
currently possible.&lt;/p&gt;

&lt;p&gt;The third model doesn’t satisfy most use cases, as most cluster administrators prefer
a common Kubernetes control plane which they provide as a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;PaaS&lt;/a&gt; to their tenants.&lt;/p&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Allowing a single Istio control plane to control multiple meshes would be an obvious next
feature. An additional improvement is to provide a single mesh that can host different
tenants with some level of isolation and security between the tenants.  This could be done
by partitioning within a single control plane using the same logical notion of namespace as
Kubernetes. A &lt;a href=&#34;https://docs.google.com/document/d/14Hb07gSrfVt5KX9qNi7FzzGwB_6WBpAnDpPG6QEEd9Q&#34;&gt;document&lt;/a&gt;
has been started within the Istio community to define additional use cases and the
Istio functionality required to support those use cases.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Video on Kubernetes multi-tenancy support, &lt;a href=&#34;https://www.youtube.com/watch?v=ahwCkJGItkU&#34;&gt;Multi-Tenancy Support &amp;amp; Security Modeling with RBAC and Namespaces&lt;/a&gt;, and the &lt;a href=&#34;https://schd.ws/hosted_files/kccncna17/21/Multi-tenancy%20Support%20%26%20Security%20Modeling%20with%20RBAC%20and%20Namespaces.pdf&#34;&gt;supporting slide deck&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kubecon talk on security that discusses Kubernetes support for &amp;ldquo;Cooperative soft multi-tenancy&amp;rdquo;, &lt;a href=&#34;https://www.youtube.com/watch?v=YRR-kZub0cA&#34;&gt;Building for Trust: How to Secure Your Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kubernetes documentation on &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34;&gt;RBAC&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/namespaces-walkthrough/&#34;&gt;namespaces&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kubecon slide deck on &lt;a href=&#34;https://schd.ws/hosted_files/kccncna17/a9/kubecon-multitenancy.pdf&#34;&gt;Multi-tenancy Deep Dive&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Google document on &lt;a href=&#34;https://docs.google.com/document/d/15w1_fesSUZHv-vwjiYa9vN_uyc--PySRoLKTuDhimjc&#34;&gt;Multi-tenancy models for Kubernetes&lt;/a&gt;. (Requires permission)&lt;/li&gt;
&lt;li&gt;Cloud Foundry WIP document, &lt;a href=&#34;https://docs.google.com/document/d/14Hb07gSrfVt5KX9qNi7FzzGwB_6WBpAnDpPG6QEEd9Q&#34;&gt;Multi-cloud and Multi-tenancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/12F183NIRAwj2hprx-a-51ByLeNqbJxK16X06vwH5OWE&#34;&gt;Istio Auto Multi-Tenancy 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/soft-multitenancy/</link>
          <author>John Joyce and Rich Curran</author>
          <guid isPermaLink="true">/en/blog/2018/soft-multitenancy/</guid>

          
              <category>tenancy</category>
          
        </item>
      
    
      
        <item>
          <title>Traffic Mirroring with Istio for Testing in Production</title>
          <description>&lt;p&gt;Trying to enumerate all the possible combinations of test cases for testing services in non-production/test environments can be daunting. In some cases, you&amp;rsquo;ll find that all of the effort that goes into cataloging these use cases doesn&amp;rsquo;t match up to real production use cases. Ideally, we could use live production use cases and traffic to help illuminate all of the feature areas of the service under test that we might miss in more contrived testing environments.&lt;/p&gt;

&lt;p&gt;Istio can help here. With the release of &lt;a href=&#34;/about/notes/0.5/&#34;&gt;Istio 0.5.0&lt;/a&gt;, Istio can mirror traffic to help test your services. You can write route rules similar to the following to enable traffic mirroring:&lt;/p&gt;

















































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
  name: mirror-traffic-to-httbin-v2
spec:
  destination:
    name: httpbin
  precedence: 11
  route:
  - labels:
      version: v1
    weight: 100
  - labels:
      version: v2
    weight: 0
  mirror:
    name: httpbin
    labels:
      version: v2&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;A few things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When traffic gets mirrored to a different service, that happens outside the critical path of the request&lt;/li&gt;
&lt;li&gt;Responses to any mirrored traffic is ignored; traffic is mirrored as &amp;ldquo;fire-and-forget&amp;rdquo;&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll need to have the 0-weighted route to hint to Istio to create the proper Envoy cluster under the covers; &lt;a href=&#34;https://github.com/istio/istio/issues/3270&#34;&gt;this should be ironed out in future releases&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more about mirroring by visiting the &lt;a href=&#34;/docs/tasks/traffic-management/mirroring/&#34;&gt;Mirroring Task&lt;/a&gt; and see a more
&lt;a href=&#34;https://blog.christianposta.com/microservices/traffic-shadowing-with-istio-reduce-the-risk-of-code-release/&#34;&gt;comprehensive treatment of this scenario on my blog&lt;/a&gt;.&lt;/p&gt;
</description>
          <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/traffic-mirroring/</link>
          <author>Christian Posta</author>
          <guid isPermaLink="true">/en/blog/2018/traffic-mirroring/</guid>

          
              <category>traffic-management</category>
          
              <category>mirroring</category>
          
        </item>
      
    
      
        <item>
          <title>Consuming External TCP Services</title>
          <description>

&lt;blockquote&gt;
&lt;p&gt;This blog post was updated on July 23, 2018 to use the new
&lt;a href=&#34;/blog/2018/v1alpha3-routing/&#34;&gt;v1alpha3 traffic management API&lt;/a&gt;. If you need to use the old version, follow the docs
&lt;a href=&#34;https://archive.istio.io/v0.7/blog/2018/egress-tcp.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my previous blog post, &lt;a href=&#34;/blog/2018/egress-https/&#34;&gt;Consuming External Web Services&lt;/a&gt;, I described how external services
 can be consumed by in-mesh Istio applications via HTTPS. In this post, I demonstrate consuming external services
 over TCP. You will use the &lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Istio Bookinfo sample application&lt;/a&gt;, the version in which the book
  ratings data is persisted in a MySQL database. You deploy this database outside the cluster and configure the
  &lt;em&gt;ratings&lt;/em&gt; microservice to use it. You define a
 &lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry&#34;&gt;Service Entry&lt;/a&gt; to allow the in-mesh applications to
 access the external database.&lt;/p&gt;

&lt;h2 id=&#34;bookinfo-sample-application-with-external-ratings-database&#34;&gt;Bookinfo sample application with external ratings database&lt;/h2&gt;

&lt;p&gt;First, you set up a MySQL database instance to hold book ratings data outside of your Kubernetes cluster. Then you
modify the &lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo sample application&lt;/a&gt; to use your database.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-database-for-ratings-data&#34;&gt;Setting up the database for ratings data&lt;/h3&gt;

&lt;p&gt;For this task you set up an instance of &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt;. You can use any MySQL instance; I used
&lt;a href=&#34;https://www.ibm.com/cloud/compose/mysql&#34;&gt;Compose for MySQL&lt;/a&gt;. I used &lt;code&gt;mysqlsh&lt;/code&gt;
(&lt;a href=&#34;https://dev.mysql.com/doc/mysql-shell/en/&#34;&gt;MySQL Shell&lt;/a&gt;) as a MySQL client to feed the ratings data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;MYSQL_DB_HOST&lt;/code&gt; and &lt;code&gt;MYSQL_DB_PORT&lt;/code&gt; environment variables:&lt;/p&gt;






































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ export MYSQL_DB_HOST=&amp;lt;your MySQL database host&amp;gt;
$ export MYSQL_DB_PORT=&amp;lt;your MySQL database port&amp;gt;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;In case of a local MySQL database with the default port, the values are &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;3306&lt;/code&gt;, respectively.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To initialize the database, run the following command entering the password when prompted. The command is
performed with the credentials of the  &lt;code&gt;admin&lt;/code&gt; user, created by default by
&lt;a href=&#34;https://www.ibm.com/cloud/compose/mysql&#34;&gt;Compose for MySQL&lt;/a&gt;.&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ curl -s https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/src/mysql/mysqldb-init.sql | mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;em&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;mysql&lt;/code&gt; client and a local MySQL database, run:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ curl -s https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/src/mysql/mysqldb-init.sql | mysql -u root -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a user with the name &lt;code&gt;bookinfo&lt;/code&gt; and grant it &lt;em&gt;SELECT&lt;/em&gt; privilege on the &lt;code&gt;test.ratings&lt;/code&gt; table:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;CREATE USER &amp;#39;bookinfo&amp;#39; IDENTIFIED BY &amp;#39;&amp;lt;password you choose&amp;gt;&amp;#39;; GRANT SELECT ON test.ratings to &amp;#39;bookinfo&amp;#39;;&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;em&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;mysql&lt;/code&gt; and the local database, the command is:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysql -u root -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;CREATE USER &amp;#39;bookinfo&amp;#39; IDENTIFIED BY &amp;#39;&amp;lt;password you choose&amp;gt;&amp;#39;; GRANT SELECT ON test.ratings to &amp;#39;bookinfo&amp;#39;;&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Here you apply the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34;&gt;principle of least privilege&lt;/a&gt;. This
means that you do not use your &lt;code&gt;admin&lt;/code&gt; user in the Bookinfo application. Instead, you create a special user for the
Bookinfo application , &lt;code&gt;bookinfo&lt;/code&gt;, with minimal privileges. In this case, the &lt;em&gt;bookinfo&lt;/em&gt; user only has the &lt;code&gt;SELECT&lt;/code&gt;
privilege on a single table.&lt;/p&gt;

&lt;p&gt;After running the command to create the user, you may want to clean your bash history by checking the number of the last
command and running &lt;code&gt;history -d &amp;lt;the number of the command that created the user&amp;gt;&lt;/code&gt;. You don&amp;rsquo;t want the password of the
 new user to be stored in the bash history. If you&amp;rsquo;re using &lt;code&gt;mysql&lt;/code&gt;, remove the last command from
 &lt;code&gt;~/.mysql_history&lt;/code&gt; file as well. Read more about password protection of the newly created user in &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/create-user.html&#34;&gt;MySQL documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inspect the created ratings to see that everything worked as expected:&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysqlsh --sql --ssl-mode=REQUIRED -u bookinfo -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;select * from test.ratings;&amp;#34;
Enter password:
&amp;#43;----------&amp;#43;--------&amp;#43;
| ReviewID | Rating |
&amp;#43;----------&amp;#43;--------&amp;#43;
|        1 |      5 |
|        2 |      4 |
&amp;#43;----------&amp;#43;--------&amp;#43;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;em&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;mysql&lt;/code&gt; and the local database:&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysql -u bookinfo -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;select * from test.ratings;&amp;#34;
Enter password:
&amp;#43;----------&amp;#43;--------&amp;#43;
| ReviewID | Rating |
&amp;#43;----------&amp;#43;--------&amp;#43;
|        1 |      5 |
|        2 |      4 |
&amp;#43;----------&amp;#43;--------&amp;#43;&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the ratings temporarily to &lt;code&gt;1&lt;/code&gt; to provide a visual clue when our database is used by the Bookinfo &lt;em&gt;ratings&lt;/em&gt;
service:&lt;/p&gt;













































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;update test.ratings set rating=1; select * from test.ratings;&amp;#34;
Enter password:

Rows matched: 2  Changed: 2  Warnings: 0
&amp;#43;----------&amp;#43;--------&amp;#43;
| ReviewID | Rating |
&amp;#43;----------&amp;#43;--------&amp;#43;
|        1 |      1 |
|        2 |      1 |
&amp;#43;----------&amp;#43;--------&amp;#43;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;em&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;mysql&lt;/code&gt; and the local database:&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysql -u root -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;update test.ratings set rating=1; select * from test.ratings;&amp;#34;
Enter password:
&amp;#43;----------&amp;#43;--------&amp;#43;
| ReviewID | Rating |
&amp;#43;----------&amp;#43;--------&amp;#43;
|        1 |      1 |
|        2 |      1 |
&amp;#43;----------&amp;#43;--------&amp;#43;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;You used the &lt;code&gt;admin&lt;/code&gt; user (and &lt;code&gt;root&lt;/code&gt; for the local database) in the last command since the &lt;code&gt;bookinfo&lt;/code&gt; user does not
have the &lt;code&gt;UPDATE&lt;/code&gt; privilege on the &lt;code&gt;test.ratings&lt;/code&gt; table.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you are ready to deploy a version of the Bookinfo application that will use your database.&lt;/p&gt;

&lt;h3 id=&#34;initial-setting-of-bookinfo-application&#34;&gt;Initial setting of Bookinfo application&lt;/h3&gt;

&lt;p&gt;To demonstrate the scenario of using an external database, you start with a Kubernetes cluster with &lt;a href=&#34;/docs/setup/kubernetes/quick-start/#installation-steps&#34;&gt;Istio installed&lt;/a&gt;. Then you deploy the
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Istio Bookinfo sample application&lt;/a&gt; and &lt;a href=&#34;/docs/examples/bookinfo/#apply-default-destination-rules&#34;&gt;apply the default destination rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This application uses the &lt;code&gt;ratings&lt;/code&gt; microservice to fetch
 book ratings, a number between 1 and 5. The ratings are displayed as stars for each review. There are several versions
 of the &lt;code&gt;ratings&lt;/code&gt; microservice. Some use &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;, others use &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt;
 as their database.&lt;/p&gt;

&lt;p&gt;The example commands in this blog post work with Istio 0.8+, with or without
&lt;a href=&#34;/docs/concepts/security/#mutual-tls-authentication&#34;&gt;mutual TLS&lt;/a&gt; enabled.&lt;/p&gt;

&lt;p&gt;As a reminder, here is the end-to-end architecture of the application from the
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo sample application&lt;/a&gt;.&lt;/p&gt;





















&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 59.08%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/docs/examples/bookinfo/withistio.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/docs/examples/bookinfo/withistio.svg&#34; alt=&#34;The original Bookinfo application&#34; title=&#34;The original Bookinfo application&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The original Bookinfo application&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;use-the-database-for-ratings-data-in-bookinfo-application&#34;&gt;Use the database for ratings data in Bookinfo application&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Modify the deployment spec of a version of the &lt;em&gt;ratings&lt;/em&gt; microservice that uses a MySQL database, to use your
database instance. The spec is in &lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml&#34;&gt;&lt;code&gt;samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml&lt;/code&gt;&lt;/a&gt;
of an Istio release archive. Edit the following lines:&lt;/p&gt;






























































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;- name: MYSQL_DB_HOST
  value: mysqldb
- name: MYSQL_DB_PORT
  value: &amp;#34;3306&amp;#34;
- name: MYSQL_DB_USER
  value: root
- name: MYSQL_DB_PASSWORD
  value: password&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Replace the values in the snippet above, specifying the database host, port, user, and password. Note that the
correct way to work with passwords in container&amp;rsquo;s environment variables in Kubernetes is &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables&#34;&gt;to use secrets&lt;/a&gt;. For this
 example task only, you may want to write the password directly in the deployment spec.  &lt;strong&gt;Do not do it&lt;/strong&gt; in a real
 environment! I also assume everyone realizes that &lt;code&gt;&amp;quot;password&amp;quot;&lt;/code&gt; should not be used as a password&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apply the modified spec to deploy the version of the &lt;em&gt;ratings&lt;/em&gt; microservice, &lt;em&gt;v2-mysql&lt;/em&gt;, that will use your
database.&lt;/p&gt;






































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml@
deployment &amp;#34;ratings-v2-mysql&amp;#34; created&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Route all the traffic destined to the &lt;em&gt;reviews&lt;/em&gt; service to its &lt;em&gt;v3&lt;/em&gt; version. You do this to ensure that the
&lt;em&gt;reviews&lt;/em&gt; service always calls the &lt;em&gt;ratings&lt;/em&gt; service. In addition, route all the traffic destined to the &lt;em&gt;ratings&lt;/em&gt;
service to &lt;em&gt;ratings v2-mysql&lt;/em&gt; that uses your database.&lt;/p&gt;

&lt;p&gt;Specify the routing for both services above by adding two
&lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#VirtualService&#34;&gt;virtual services&lt;/a&gt;. These virtual services are
specified in &lt;code&gt;samples/bookinfo/networking/virtual-service-ratings-mysql.yaml&lt;/code&gt; of an Istio release archive.
&lt;strong&gt;&lt;em&gt;Important:&lt;/em&gt;&lt;/strong&gt; make sure you
&lt;a href=&#34;/docs/examples/bookinfo/#apply-default-destination-rules&#34;&gt;applied the default destination rules&lt;/a&gt; before running the
 following command.&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/networking/virtual-service-ratings-mysql.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-ratings-mysql.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The updated architecture appears below. Note that the blue arrows inside the mesh mark the traffic configured according
 to the virtual services we added. According to the virtual services, the traffic is sent to &lt;em&gt;reviews v3&lt;/em&gt; and
 &lt;em&gt;ratings v2-mysql&lt;/em&gt;.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 59.31%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-tcp/./bookinfo-ratings-v2-mysql-external.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-tcp/./bookinfo-ratings-v2-mysql-external.svg&#34; alt=&#34;The Bookinfo application with ratings v2-mysql and an external MySQL database&#34; title=&#34;The Bookinfo application with ratings v2-mysql and an external MySQL database&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The Bookinfo application with ratings v2-mysql and an external MySQL database&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Note that the MySQL database is outside the Istio service mesh, or more precisely outside the Kubernetes cluster. The
 boundary of the service mesh is marked by a dashed line.&lt;/p&gt;

&lt;h3 id=&#34;access-the-webpage&#34;&gt;Access the webpage&lt;/h3&gt;

&lt;p&gt;Access the webpage of the application, after
&lt;a href=&#34;/docs/examples/bookinfo/#determining-the-ingress-ip-and-port&#34;&gt;determining the ingress IP and port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have a problem&amp;hellip; Instead of the rating stars, the message &lt;em&gt;&amp;ldquo;Ratings service is currently unavailable&amp;rdquo;&lt;/em&gt; is currently
 displayed below each review:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 36.19%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-tcp/./errorFetchingBookRating.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-tcp/./errorFetchingBookRating.png&#34; alt=&#34;The Ratings service error messages&#34; title=&#34;The Ratings service error messages&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The Ratings service error messages&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;As in &lt;a href=&#34;/blog/2018/egress-https/&#34;&gt;Consuming External Web Services&lt;/a&gt;, you experience &lt;strong&gt;graceful service degradation&lt;/strong&gt;,
which is good. The application did not crash due to the error in the &lt;em&gt;ratings&lt;/em&gt; microservice. The webpage of the
application correctly displayed the book information, the details, and the reviews, just without the rating stars.&lt;/p&gt;

&lt;p&gt;You have the same problem as in &lt;a href=&#34;/blog/2018/egress-https/&#34;&gt;Consuming External Web Services&lt;/a&gt;, namely all the traffic
outside the Kubernetes cluster, both TCP and HTTP, is blocked by default by the sidecar proxies. To enable such traffic
 for TCP, a mesh-external service entry for TCP must be defined.&lt;/p&gt;

&lt;h3 id=&#34;mesh-external-service-entry-for-an-external-mysql-instance&#34;&gt;Mesh-external service entry for an external MySQL instance&lt;/h3&gt;

&lt;p&gt;TCP mesh-external service entries come to our rescue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get the IP address of your MySQL database instance. As an option, you can use the
&lt;a href=&#34;https://linux.die.net/man/1/host&#34;&gt;host&lt;/a&gt; command:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ export MYSQL_DB_IP=$(host $MYSQL_DB_HOST | grep &amp;#34; has address &amp;#34; | cut -d&amp;#34; &amp;#34; -f4)&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;For a local database, set &lt;code&gt;MYSQL_DB_IP&lt;/code&gt; to contain the IP of your machine, accessible from your cluster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a TCP mesh-external service entry:&lt;/p&gt;











































































































&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: mysql-external
spec:
  hosts:
  - $MYSQL_DB_HOST
  addresses:
  - $MYSQL_DB_IP/32
  ports:
  - name: tcp
    number: $MYSQL_DB_PORT
    protocol: tcp
  location: MESH_EXTERNAL
EOF&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the service entry you just created and check that it contains the correct values:&lt;/p&gt;





















































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get serviceentry mysql-external -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
...&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that for a TCP service entry, you specify &lt;code&gt;tcp&lt;/code&gt; as the protocol of a port of the entry. Also note that you have to
specify the IP of the external service in the list of addresses, as a &lt;a href=&#34;https://tools.ietf.org/html/rfc2317&#34;&gt;CIDR&lt;/a&gt; block
with suffix &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will talk more about TCP service entries
&lt;a href=&#34;#service-entries-for-tcp-traffic&#34;&gt;below&lt;/a&gt;. For now, verify that the service entry we added fixed the problem. Access the
webpage and see if the stars are back.&lt;/p&gt;

&lt;p&gt;It worked! Accessing the web page of the application displays the ratings without error:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 36.69%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-tcp/./externalMySQLRatings.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-tcp/./externalMySQLRatings.png&#34; alt=&#34;Book Ratings Displayed Correctly&#34; title=&#34;Book Ratings Displayed Correctly&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Book Ratings Displayed Correctly&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Note that you see a one-star rating for both displayed reviews, as expected. You changed the ratings to be one star to
provide us with a visual clue that our external database is indeed being used.&lt;/p&gt;

&lt;p&gt;As with service entries for HTTP/HTTPS, you can delete and create service entries for TCP using &lt;code&gt;kubectl&lt;/code&gt;, dynamically.&lt;/p&gt;

&lt;h2 id=&#34;motivation-for-egress-tcp-traffic-control&#34;&gt;Motivation for egress TCP traffic control&lt;/h2&gt;

&lt;p&gt;Some in-mesh Istio applications must access external services, for example legacy systems. In many cases, the access is
not performed over HTTP or HTTPS protocols. Other TCP protocols are used, such as database-specific protocols like
&lt;a href=&#34;https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/&#34;&gt;MongoDB Wire Protocol&lt;/a&gt; and &lt;a href=&#34;https://dev.mysql.com/doc/internals/en/client-server-protocol.html&#34;&gt;MySQL Client/Server Protocol&lt;/a&gt; to communicate with external databases.&lt;/p&gt;

&lt;p&gt;Next let me provide more details about the service entries for TCP traffic.&lt;/p&gt;

&lt;h2 id=&#34;service-entries-for-tcp-traffic&#34;&gt;Service entries for TCP traffic&lt;/h2&gt;

&lt;p&gt;The service entries for enabling TCP traffic to a specific port must specify &lt;code&gt;TCP&lt;/code&gt; as the protocol of the port.
Additionally, for the &lt;a href=&#34;https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/&#34;&gt;MongoDB Wire Protocol&lt;/a&gt;, the
protocol can be specified as &lt;code&gt;MONGO&lt;/code&gt;, instead of &lt;code&gt;TCP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;addresses&lt;/code&gt; field of the entry, a block of IPs in &lt;a href=&#34;https://tools.ietf.org/html/rfc2317&#34;&gt;CIDR&lt;/a&gt;
notation must be used. Note that the &lt;code&gt;hosts&lt;/code&gt; field is ignored for TCP service entries.&lt;/p&gt;

&lt;p&gt;To enable TCP traffic to an external service by its hostname, all the IPs of the hostname must be specified. Each IP
must be specified by a CIDR block.&lt;/p&gt;

&lt;p&gt;Note that all the IPs of an external service are not always known. To enable egress TCP traffic, only the IPs that are
used by the applications must be specified.&lt;/p&gt;

&lt;p&gt;Also note that the IPs of an external service are not always static, for example in the case of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_delivery_network&#34;&gt;CDNs&lt;/a&gt;. Sometimes the IPs are static most of the time, but can
be changed from time to time, for example due to infrastructure changes. In these cases, if the range of the possible
IPs is known, you should specify the range by CIDR blocks. If the range of the possible IPs is not known, service
entries for TCP cannot be used and
&lt;a href=&#34;/docs/tasks/traffic-management/egress/#calling-external-services-directly&#34;&gt;the external services must be called directly&lt;/a&gt;,
bypassing the sidecar proxies.&lt;/p&gt;

&lt;h2 id=&#34;relation-to-mesh-expansion&#34;&gt;Relation to mesh expansion&lt;/h2&gt;

&lt;p&gt;Note that the scenario described in this post is different from the mesh expansion scenario, described in the
&lt;a href=&#34;/docs/examples/integrating-vms/&#34;&gt;Integrating Virtual Machines&lt;/a&gt; example. In that scenario, a MySQL instance runs on an
external
(outside the cluster) machine (a bare metal or a VM), integrated with the Istio service mesh. The MySQL service becomes
a first-class citizen of the mesh with all the beneficial features of Istio applicable. Among other things, the service
becomes addressable by a local cluster domain name, for example by &lt;code&gt;mysqldb.vm.svc.cluster.local&lt;/code&gt;, and the communication
 to it can be secured by
&lt;a href=&#34;/docs/concepts/security/#mutual-tls-authentication&#34;&gt;mutual TLS authentication&lt;/a&gt;. There is no need to create a service
entry to access this service; however, the service must be registered with Istio. To enable such integration, Istio
components (&lt;em&gt;Envoy proxy&lt;/em&gt;, &lt;em&gt;node-agent&lt;/em&gt;, &lt;em&gt;istio-agent&lt;/em&gt;) must be installed on the machine and the Istio control plane
(&lt;em&gt;Pilot&lt;/em&gt;, &lt;em&gt;Mixer&lt;/em&gt;, &lt;em&gt;Citadel&lt;/em&gt;) must be accessible from it. See the
&lt;a href=&#34;/docs/setup/kubernetes/mesh-expansion/&#34;&gt;Istio Mesh Expansion&lt;/a&gt; instructions for more details.&lt;/p&gt;

&lt;p&gt;In our case, the MySQL instance can run on any machine or can be provisioned as a service by a cloud provider. There is
no requirement to integrate the machine with Istio. The Istio control plane does not have to be accessible from the
machine. In the case of MySQL as a service, the machine which MySQL runs on may be not accessible and installing on it
the required components may be impossible. In our case, the MySQL instance is addressable by its global domain name,
which could be beneficial if the consuming applications expect to use that domain name. This is especially relevant when
 that expected domain name cannot be changed in the deployment configuration of the consuming applications.&lt;/p&gt;

&lt;h2 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Drop the &lt;code&gt;test&lt;/code&gt; database and the &lt;code&gt;bookinfo&lt;/code&gt; user:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;drop database test; drop user bookinfo;&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;&lt;em&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;mysql&lt;/code&gt; and the local database:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ mysql -u root -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e &amp;#34;drop database test; drop user bookinfo;&amp;#34;&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove the virtual services:&lt;/p&gt;











































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete -f @samples/bookinfo/networking/virtual-service-ratings-mysql.yaml@
Deleted config: virtual-service/default/reviews
Deleted config: virtual-service/default/ratings&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-ratings-mysql.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Undeploy &lt;em&gt;ratings v2-mysql&lt;/em&gt;:&lt;/p&gt;






































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete -f @samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml@
deployment &amp;#34;ratings-v2-mysql&amp;#34; deleted&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete the service entry:&lt;/p&gt;






































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete serviceentry mysql-external -n default
Deleted config: serviceentry mysql-external&lt;/code&gt;&lt;/pre&gt;





&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post, I demonstrated how the microservices in an Istio service mesh can consume external services via TCP.
By default, Istio blocks all the traffic, TCP and HTTP, to the hosts outside the cluster. To enable such traffic for
TCP, TCP mesh-external service entries must be created for the service mesh.&lt;/p&gt;
</description>
          <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/egress-tcp/</link>
          <author>Vadim Eisenberg</author>
          <guid isPermaLink="true">/en/blog/2018/egress-tcp/</guid>

          
              <category>traffic-management</category>
          
              <category>egress</category>
          
              <category>tcp</category>
          
        </item>
      
    
      
        <item>
          <title>Consuming External Web Services</title>
          <description>

&lt;blockquote&gt;
&lt;p&gt;This blog post was updated on August 09, 2018. It reflects the functionality of Istio 1.0 and uses the new
&lt;a href=&#34;/blog/2018/v1alpha3-routing/&#34;&gt;v1alpha3 traffic management API&lt;/a&gt;. If you need to use the old version, follow the docs
&lt;a href=&#34;https://archive.istio.io/v0.7/blog/2018/egress-https.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In many cases, not all the parts of a microservices-based application reside in a &lt;em&gt;service mesh&lt;/em&gt;. Sometimes, the
microservices-based applications use functionality provided by legacy systems that reside outside the mesh. You may want
to migrate these systems to the service mesh gradually. Until these systems are migrated, they must be accessed by the
applications inside the mesh. In other cases, the applications use web services provided by third parties.&lt;/p&gt;

&lt;p&gt;In this blog post, I modify the &lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Istio Bookinfo Sample Application&lt;/a&gt; to fetch book details from
an external web service (&lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Google Books APIs&lt;/a&gt;). I show how
to enable egress HTTPS traffic in Istio by using &lt;em&gt;mesh-external service entries&lt;/em&gt;. I provide two options for egress
HTTPS traffic and describe the pros and cons of each of the options.&lt;/p&gt;

&lt;h2 id=&#34;initial-setting&#34;&gt;Initial setting&lt;/h2&gt;

&lt;p&gt;To demonstrate the scenario of consuming an external web service, I start with a Kubernetes cluster with &lt;a href=&#34;/docs/setup/kubernetes/quick-start/#installation-steps&#34;&gt;Istio installed&lt;/a&gt;. Then I deploy
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Istio Bookinfo Sample Application&lt;/a&gt;. This application uses the &lt;em&gt;details&lt;/em&gt; microservice to fetch
book details, such as the number of pages and the publisher. The original &lt;em&gt;details&lt;/em&gt; microservice provides the book
details without consulting any external service.&lt;/p&gt;

&lt;p&gt;The example commands in this blog post work with Istio 1.0+, with or without
&lt;a href=&#34;/docs/concepts/security/#mutual-tls-authentication&#34;&gt;mutual TLS&lt;/a&gt; enabled. The Bookinfo configuration files reside in the
&lt;code&gt;samples/bookinfo&lt;/code&gt; directory of the Istio release archive.&lt;/p&gt;

&lt;p&gt;Here is a copy of the end-to-end architecture of the application from the original
&lt;a href=&#34;/docs/examples/bookinfo/&#34;&gt;Bookinfo sample application&lt;/a&gt;.&lt;/p&gt;





















&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 59.08%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/docs/examples/bookinfo/withistio.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/docs/examples/bookinfo/withistio.svg&#34; alt=&#34;The Original Bookinfo Application&#34; title=&#34;The Original Bookinfo Application&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The Original Bookinfo Application&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Perform the steps in the
&lt;a href=&#34;/docs/examples/bookinfo/#deploying-the-application&#34;&gt;Deploying the application&lt;/a&gt;,
&lt;a href=&#34;/docs/examples/bookinfo/#confirm-the-app-is-running&#34;&gt;Confirm the app is running&lt;/a&gt;, and
&lt;a href=&#34;/docs/examples/bookinfo/#apply-default-destination-rules&#34;&gt;Apply default destination rules&lt;/a&gt;
sections.&lt;/p&gt;

&lt;h2 id=&#34;bookinfo-with-https-access-to-a-google-books-web-service&#34;&gt;Bookinfo with HTTPS access to a Google Books web service&lt;/h2&gt;

&lt;p&gt;Deploy a new version of the &lt;em&gt;details&lt;/em&gt; microservice, &lt;em&gt;v2&lt;/em&gt;, that fetches the book details from &lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Google Books APIs&lt;/a&gt;. Run the following command; it sets the
&lt;code&gt;DO_NOT_ENCRYPT&lt;/code&gt; environment variable of the service&amp;rsquo;s container to &lt;code&gt;false&lt;/code&gt;. This setting will instruct the deployed
service to use HTTPS (instead of HTTP) to access to the external service.&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-details-v2.yaml@ --dry-run -o yaml | kubectl set env --local -f - &amp;#39;DO_NOT_ENCRYPT=false&amp;#39; -o yaml | kubectl apply -f -&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;&lt;/a&gt;




&lt;p&gt;The updated architecture of the application now looks as follows:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 65.16%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-https/./bookinfo-details-v2.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-https/./bookinfo-details-v2.svg&#34; alt=&#34;The Bookinfo Application with details V2&#34; title=&#34;The Bookinfo Application with details V2&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The Bookinfo Application with details V2&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Note that the Google Books web service is outside the Istio service mesh, the boundary of which is marked by a dashed
line.&lt;/p&gt;

&lt;p&gt;Now direct all the traffic destined to the &lt;em&gt;details&lt;/em&gt; microservice, to &lt;em&gt;details version v2&lt;/em&gt;.&lt;/p&gt;





























&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/networking/virtual-service-details-v2.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-details-v2.yaml&#34;&gt;&lt;/a&gt;




&lt;p&gt;Note that the virtual service relies on a destination rule that you created in the &lt;a href=&#34;/docs/examples/bookinfo/#apply-default-destination-rules&#34;&gt;Apply default destination rules&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;Access the web page of the application, after
&lt;a href=&#34;/docs/examples/bookinfo/#determining-the-ingress-ip-and-port&#34;&gt;determining the ingress IP and port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oops&amp;hellip; Instead of the book details you have the &lt;em&gt;Error fetching product details&lt;/em&gt; message displayed:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 36.01%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-https/./errorFetchingBookDetails.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-https/./errorFetchingBookDetails.png&#34; alt=&#34;The Error Fetching Product Details Message&#34; title=&#34;The Error Fetching Product Details Message&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;The Error Fetching Product Details Message&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The good news is that your application did not crash. With a good microservice design, you do not have &lt;strong&gt;failure
propagation&lt;/strong&gt;. In your case, the failing &lt;em&gt;details&lt;/em&gt; microservice does not cause the &lt;code&gt;productpage&lt;/code&gt; microservice to fail.
Most of the functionality of the application is still provided, despite the failure in the &lt;em&gt;details&lt;/em&gt; microservice. You
have &lt;strong&gt;graceful service degradation&lt;/strong&gt;: as you can see, the reviews and the ratings are displayed correctly, and the
application is still useful.&lt;/p&gt;

&lt;p&gt;So what might have gone wrong? Ah&amp;hellip; The answer is that I forgot to tell you to enable traffic from inside the mesh to
an external service, in this case to the Google Books web service. By default, the Istio sidecar proxies
(&lt;a href=&#34;https://www.envoyproxy.io&#34;&gt;Envoy proxies&lt;/a&gt;) &lt;strong&gt;block all the traffic to destinations outside the cluster&lt;/strong&gt;. To enable
such traffic, you must define a
&lt;a href=&#34;/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry&#34;&gt;mesh-external service entry&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;enable-https-access-to-a-google-books-web-service&#34;&gt;Enable HTTPS access to a Google Books web service&lt;/h3&gt;

&lt;p&gt;No worries, define a &lt;strong&gt;mesh-external service entry&lt;/strong&gt; and fix your application. You must also define a &lt;em&gt;virtual
service&lt;/em&gt; to perform routing by &lt;a href=&#34;https://en.wikipedia.org/wiki/Server_Name_Indication&#34;&gt;SNI&lt;/a&gt; to the external service.&lt;/p&gt;

































































































































































































&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  tls:
  - match:
    - port: 443
      sni_hosts:
      - www.googleapis.com
    route:
    - destination:
        host: www.googleapis.com
        port:
          number: 443
      weight: 100
EOF&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Now accessing the web page of the application displays the book details without error:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 34.82%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-https/./externalBookDetails.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-https/./externalBookDetails.png&#34; alt=&#34;Book Details Displayed Correctly&#34; title=&#34;Book Details Displayed Correctly&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Book Details Displayed Correctly&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;You can query your service entries:&lt;/p&gt;







































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get serviceentries
NAME         AGE
googleapis   8m&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;You can delete your service entry:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete serviceentry googleapis
serviceentry &amp;#34;googleapis&amp;#34; deleted&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;and see in the output that the service entry is deleted.&lt;/p&gt;

&lt;p&gt;Accessing the web page after deleting the service entry produces the same error that you experienced before, namely
&lt;em&gt;Error fetching product details&lt;/em&gt;. As you can see, the service entries are defined &lt;strong&gt;dynamically&lt;/strong&gt;, as are many other
Istio configuration artifacts. The Istio operators can decide dynamically which domains they allow the microservices to
access. They can enable and disable traffic to the external domains on the fly, without redeploying the microservices.&lt;/p&gt;

&lt;h3 id=&#34;cleanup-of-https-access-to-a-google-books-web-service&#34;&gt;Cleanup of HTTPS access to a Google Books web service&lt;/h3&gt;












































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete serviceentry googleapis
$ kubectl delete virtualservice googleapis
$ kubectl delete -f @samples/bookinfo/networking/virtual-service-details-v2.yaml@
$ kubectl delete -f @samples/bookinfo/platform/kube/bookinfo-details-v2.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-details-v2.yaml&#34;&gt;&lt;/a&gt;





&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;&lt;/a&gt;




&lt;h2 id=&#34;tls-origination-by-istio&#34;&gt;TLS origination by Istio&lt;/h2&gt;

&lt;p&gt;There is a caveat to this story. Suppose you want to monitor which specific set of
&lt;a href=&#34;https://developers.google.com/apis-explorer/&#34;&gt;Google APIs&lt;/a&gt; your microservices use
(&lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Books&lt;/a&gt;,
&lt;a href=&#34;https://developers.google.com/calendar/&#34;&gt;Calendar&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/tasks/&#34;&gt;Tasks&lt;/a&gt; etc.)
Suppose you want to enforce a policy that using only
&lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Books APIs&lt;/a&gt; is allowed. Suppose you want to monitor the
book identifiers that your microservices access. For these monitoring and policy tasks you need to know the URL path.
Consider for example the URL
&lt;a href=&#34;https://www.googleapis.com/books/v1/volumes?q=isbn:0486424618&#34;&gt;&lt;code&gt;www.googleapis.com/books/v1/volumes?q=isbn:0486424618&lt;/code&gt;&lt;/a&gt;.
In that URL, &lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Books APIs&lt;/a&gt; is specified by the path segment
&lt;code&gt;/books&lt;/code&gt;, and the &lt;a href=&#34;https://en.wikipedia.org/wiki/International_Standard_Book_Number&#34;&gt;ISBN&lt;/a&gt; number by the path segment
&lt;code&gt;/volumes?q=isbn:0486424618&lt;/code&gt;. However, in HTTPS, all the HTTP details (hostname, path, headers etc.) are encrypted and
such monitoring and policy enforcement by the sidecar proxies is not possible. Istio can only know the server name of
the encrypted requests by the &lt;a href=&#34;https://tools.ietf.org/html/rfc3546#section-3.1&#34;&gt;SNI&lt;/a&gt; (&lt;em&gt;Server Name Indication&lt;/em&gt;) field,
in this case &lt;code&gt;www.googleapis.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To allow Istio to perform monitoring and policy enforcement of egress requests based on HTTP details, the microservices
must issue HTTP requests. Istio then opens an HTTPS connection to the destination (performs TLS origination). The code
of the microservices must be written differently or configured differently, according to whether the microservice runs
inside or outside an Istio service mesh. This contradicts the Istio design goal of &lt;a href=&#34;/docs/concepts/what-is-istio/#design-goals&#34;&gt;maximizing transparency&lt;/a&gt;. Sometimes you need to compromise&amp;hellip;&lt;/p&gt;

&lt;p&gt;The diagram below shows two options for sending HTTPS traffic to external services. On the top, a microservice sends
regular HTTPS requests, encrypted end-to-end. On the bottom, the same microservice sends unencrypted HTTP requests
inside a pod, which are intercepted by the sidecar Envoy proxy. The sidecar proxy performs TLS origination, so the
traffic between the pod and the external service is encrypted.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 60%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 95.14%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2018/egress-https/./https_from_the_app.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2018/egress-https/./https_from_the_app.svg&#34; alt=&#34;HTTPS traffic to external services, with TLS originated by the microservice vs. by the sidecar proxy&#34; title=&#34;HTTPS traffic to external services, with TLS originated by the microservice vs. by the sidecar proxy&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;HTTPS traffic to external services, with TLS originated by the microservice vs. by the sidecar proxy&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Here is how both patterns are supported in the
&lt;a href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/src/details/details.rb&#34;&gt;Bookinfo details microservice code&lt;/a&gt;, using the Ruby
&lt;a href=&#34;https://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html&#34;&gt;net/http module&lt;/a&gt;:&lt;/p&gt;
















































&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;uri = URI.parse(&amp;#39;https://www.googleapis.com/books/v1/volumes?q=isbn:&amp;#39; &amp;#43; isbn)
http = Net::HTTP.new(uri.host, uri.port)
...
unless ENV[&amp;#39;DO_NOT_ENCRYPT&amp;#39;] === &amp;#39;true&amp;#39; then
     http.use_ssl = true
end&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Note that the port is derived by the &lt;code&gt;URI.parse&lt;/code&gt; from the URI&amp;rsquo;s schema (&lt;code&gt;https://&lt;/code&gt;) to be &lt;code&gt;443&lt;/code&gt;, the default HTTPS port.
When the &lt;code&gt;DO_NOT_ENCRYPT&lt;/code&gt; environment variable is defined, the request is performed without SSL (plain HTTP).&lt;/p&gt;

&lt;p&gt;You can set the &lt;code&gt;DO_NOT_ENCRYPT&lt;/code&gt; environment variable to &lt;em&gt;&amp;ldquo;true&amp;rdquo;&lt;/em&gt; in the
&lt;a href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;Kubernetes deployment spec of details v2&lt;/a&gt;,
the &lt;code&gt;container&lt;/code&gt; section:&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;env:
- name: DO_NOT_ENCRYPT
  value: &amp;#34;true&amp;#34;&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;In the next section you will configure TLS origination for accessing an external web service.&lt;/p&gt;

&lt;h2 id=&#34;bookinfo-with-tls-origination-to-a-google-books-web-service&#34;&gt;Bookinfo with TLS origination to a Google Books web service&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deploy a version of &lt;em&gt;details v2&lt;/em&gt; that sends an HTTP request to
&lt;a href=&#34;https://developers.google.com/books/docs/v1/getting_started&#34;&gt;Google Books APIs&lt;/a&gt;. The &lt;code&gt;DO_NOT_ENCRYPT&lt;/code&gt; variable
is set to true in
&lt;a href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;&lt;code&gt;bookinfo-details-v2.yaml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-details-v2.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Direct the traffic destined to the &lt;em&gt;details&lt;/em&gt; microservice, to &lt;em&gt;details version v2&lt;/em&gt;.&lt;/p&gt;

































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl apply -f @samples/bookinfo/networking/virtual-service-details-v2.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-details-v2.yaml&#34;&gt;&lt;/a&gt;


&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a mesh-external service entry for &lt;code&gt;www.google.apis&lt;/code&gt; and a destination rule to perform TLS origination.&lt;/p&gt;












































































































































































&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  ports:
  - number: 443
    name: http-port-for-tls-origination
    protocol: HTTP
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: originate-tls-for-googleapis
spec:
  host: www.googleapis.com
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE # initiates HTTPS when accessing edition.cnn.com
EOF&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Note that port &lt;code&gt;443&lt;/code&gt; is designated by a name with the prefix &lt;code&gt;http-&lt;/code&gt;, and its protocol is specified as &lt;code&gt;HTTP&lt;/code&gt;. Note
that you are not required to use port 443 to send HTTP requests for TLS origination.
&lt;a href=&#34;/docs/examples/advanced-gateways/egress-tls-origination/&#34;&gt;This example&lt;/a&gt; shows how to perform TLS
origination with port rewriting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Access the web page of the application and verify that the book details are displayed without errors.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the log of of the sidecar proxy of &lt;em&gt;details v2&lt;/em&gt; and see the HTTP request.&lt;/p&gt;











































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl logs $(kubectl get pods -l app=details -l version=v2 -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) istio-proxy | grep googleapis
[2018-08-09T11:32:58.171Z] &amp;#34;GET /books/v1/volumes?q=isbn:0486424618 HTTP/1.1&amp;#34; 200 - 0 1050 264 264 &amp;#34;-&amp;#34; &amp;#34;Ruby&amp;#34; &amp;#34;b993bae7-4288-9241-81a5-4cde93b2e3a6&amp;#34; &amp;#34;www.googleapis.com:443&amp;#34; &amp;#34;172.217.20.74:443&amp;#34;
EOF&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Note the URL path in the log, the path can be monitored and access policies can be applied based on it. To read more
about monitoring and access policies for HTTP egress traffic, check out &lt;a href=&#34;https://archive.istio.io/v0.8/blog/2018/egress-monitoring-access-control/#logging&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cleanup-of-tls-origination-to-a-google-books-web-service&#34;&gt;Cleanup of TLS origination to a Google Books web service&lt;/h3&gt;












































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl delete serviceentry googleapis
$ kubectl delete destinationrule originate-tls-for-googleapis
$ kubectl delete -f @samples/bookinfo/networking/virtual-service-details-v2.yaml@
$ kubectl delete -f @samples/bookinfo/platform/kube/bookinfo-details-v2.yaml@&lt;/code&gt;&lt;/pre&gt;








&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-details-v2.yaml&#34;&gt;&lt;/a&gt;





&lt;a hidden style=&#34;display:none&#34; href=&#34;https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/platform/kube/bookinfo-details-v2.yaml&#34;&gt;&lt;/a&gt;




&lt;h3 id=&#34;relation-to-istio-mutual-tls&#34;&gt;Relation to Istio mutual TLS&lt;/h3&gt;

&lt;p&gt;Note that the TLS origination in this case is unrelated to
&lt;a href=&#34;/docs/concepts/security/#mutual-tls-authentication&#34;&gt;the mutual TLS&lt;/a&gt; applied by Istio. The TLS origination for the
external services will work, whether the Istio mutual TLS is enabled or not. The &lt;strong&gt;mutual&lt;/strong&gt; TLS secures
service-to-service communication &lt;strong&gt;inside&lt;/strong&gt; the service mesh and provides each service with a strong identity. The
&lt;strong&gt;external services&lt;/strong&gt; in this blog post were accessed using &lt;strong&gt;one-way TLS&lt;/strong&gt;, the same mechanism used to secure communication between a
web browser and a web server. TLS is applied to the communication with external services to verify the identity of the
external server and to encrypt the traffic.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post I demonstrated how microservices in an Istio service mesh can consume external web services by
HTTPS. By default, Istio blocks all the traffic to the hosts outside the cluster. To enable such traffic, mesh-external
service entries must be created for the service mesh. It is possible to access the external sites either by
issuing HTTPS requests, or by issuing HTTP requests with Istio performing TLS origination. When the microservices issue
HTTPS requests, the traffic is encrypted end-to-end, however Istio cannot monitor HTTP details like the URL paths of the
requests. When the microservices issue HTTP requests, Istio can monitor the HTTP details of the requests and enforce
HTTP-based access policies. However, in that case the traffic between microservice and the sidecar proxy is unencrypted.
Having part of the traffic unencrypted can be forbidden in organizations with very strict security requirements.&lt;/p&gt;
</description>
          <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
          <link>/en/blog/2018/egress-https/</link>
          <author>Vadim Eisenberg</author>
          <guid isPermaLink="true">/en/blog/2018/egress-https/</guid>

          
              <category>traffic-management</category>
          
              <category>egress</category>
          
              <category>https</category>
          
        </item>
      
    
      
        <item>
          <title>Mixer and the SPOF Myth</title>
          <description>

&lt;p&gt;As &lt;a href=&#34;/docs/concepts/policies-and-telemetry/&#34;&gt;Mixer&lt;/a&gt; is in the request path, it is natural to question how it impacts
overall system availability and latency. A common refrain we hear when people first glance at Istio architecture diagrams is
&amp;ldquo;Isn&amp;rsquo;t this just introducing a single point of failure?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In this post, we’ll dig deeper and cover the design principles that underpin Mixer and the surprising fact Mixer actually
increases overall mesh availability and reduces average request latency.&lt;/p&gt;

&lt;p&gt;Istio&amp;rsquo;s use of Mixer has two main benefits in terms of overall system availability and latency:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Increased SLO&lt;/strong&gt;. Mixer insulates proxies and services from infrastructure backend failures, enabling higher effective mesh availability. The mesh as a whole tends to experience a lower rate of failure when interacting with the infrastructure backends than if Mixer were not present.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced Latency&lt;/strong&gt;. Through aggressive use of shared multi-level caches and sharding, Mixer reduces average observed latencies across the mesh.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll explain this in more detail below.&lt;/p&gt;

&lt;h2 id=&#34;how-we-got-here&#34;&gt;How we got here&lt;/h2&gt;

&lt;p&gt;For many years at Google, we’ve been using an internal API &amp;amp; service management system to handle the many APIs exposed by Google. This system has been fronting the world’s biggest services (Google Maps, YouTube, Gmail, etc) and sustains a peak rate of hundreds of millions of QPS. Although this system has served us well, it had problems keeping up with Google’s rapid growth, and it became clear that a new architecture was needed in order to tamp down ballooning operational costs.&lt;/p&gt;

&lt;p&gt;In 2014, we started an initiative to create a replacement architecture that would scale better. The result has proven extremely successful and has been gradually deployed throughout Google, saving in the process millions of dollars a month in ops costs.&lt;/p&gt;

&lt;p&gt;The older system was built around a centralized fleet of fairly heavy proxies into which all incoming traffic would flow, before being forwarded to the services where the real work was done. The newer architecture jettisons the shared proxy design and instead consists of a very lean and efficient distributed sidecar proxy sitting next to service instances, along with a shared fleet of sharded control plane intermediaries:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 75%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 74.79%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/mixer-spof-myth/./mixer-spof-myth-1.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/mixer-spof-myth/./mixer-spof-myth-1.svg&#34; alt=&#34;Google System Topology&#34; title=&#34;Google System Topology&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Google&amp;#39;s API &amp;amp; Service Management System&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Look familiar? Of course: it’s just like Istio! Istio was conceived as a second generation of this distributed proxy architecture. We took the core lessons from this internal system, generalized many of the concepts by working with our partners, and created Istio.&lt;/p&gt;

&lt;h2 id=&#34;architecture-recap&#34;&gt;Architecture recap&lt;/h2&gt;

&lt;p&gt;As shown in the diagram below, Mixer sits between the mesh and the infrastructure backends that support it:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 75%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 65.89%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/mixer-spof-myth/./mixer-spof-myth-2.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/mixer-spof-myth/./mixer-spof-myth-2.svg&#34; alt=&#34;Istio Topology&#34; title=&#34;Istio Topology&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Istio Topology&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The Envoy sidecar logically calls Mixer before each request to perform precondition checks, and after each request to report telemetry.
The sidecar has local caching such that a relatively large percentage of precondition checks can be performed from cache. Additionally, the
sidecar buffers outgoing telemetry such that it only actually needs to call Mixer once for every several thousands requests. Whereas precondition
checks are synchronous to request processing, telemetry reports are done asynchronously with a fire-and-forget pattern.&lt;/p&gt;

&lt;p&gt;At a high level, Mixer provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Backend Abstraction&lt;/strong&gt;. Mixer insulates the Istio components and services within the mesh from the implementation details of individual infrastructure backends.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intermediation&lt;/strong&gt;. Mixer allows operators to have fine-grained control over all interactions between the mesh and the infrastructure backends.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, even beyond these purely functional aspects, Mixer has other characteristics that provide the system with additional benefits.&lt;/p&gt;

&lt;h2 id=&#34;mixer-slo-booster&#34;&gt;Mixer: SLO booster&lt;/h2&gt;

&lt;p&gt;Contrary to the claim that Mixer is a SPOF and can therefore lead to mesh outages, we believe it in fact improves the effective availability of a mesh. How can that be? There are three basic characteristics at play:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Statelessness&lt;/strong&gt;. Mixer is stateless in that it doesn’t manage any persistent storage of its own.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hardening&lt;/strong&gt;. Mixer proper is designed to be a highly reliable component. The design intent is to achieve &amp;gt; 99.999% uptime for any individual Mixer instance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Caching and Buffering&lt;/strong&gt;. Mixer is designed to accumulate a large amount of transient ephemeral state.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sidecar proxies that sit next to each service instance in the mesh must necessarily be frugal in terms of memory consumption, which constrains the possible amount of local caching and buffering. Mixer, however, lives independently and can use considerably larger caches and output buffers. Mixer thus acts as a highly-scaled and highly-available second-level cache for the sidecars.&lt;/p&gt;

&lt;p&gt;Mixer’s expected availability is considerably higher than most infrastructure backends (those often have availability of perhaps 99.9%). Its local caches and buffers help mask infrastructure backend failures by being able to continue operating even when a backend has become unresponsive.&lt;/p&gt;

&lt;h2 id=&#34;mixer-latency-slasher&#34;&gt;Mixer: Latency slasher&lt;/h2&gt;

&lt;p&gt;As we explained above, the Istio sidecars generally have fairly effective first-level caching. They can serve the majority of their traffic from cache. Mixer provides a much greater shared pool of second-level cache, which helps Mixer contribute to a lower average per-request latency.&lt;/p&gt;

&lt;p&gt;While it’s busy cutting down latency, Mixer is also inherently cutting down the number of calls your mesh makes to infrastructure backends. Depending on how you’re paying for these backends, this might end up saving you some cash by cutting down the effective QPS to the backends.&lt;/p&gt;

&lt;h2 id=&#34;work-ahead&#34;&gt;Work ahead&lt;/h2&gt;

&lt;p&gt;We have opportunities ahead to continue improving the system in many ways.&lt;/p&gt;

&lt;h3 id=&#34;configuration-canaries&#34;&gt;Configuration canaries&lt;/h3&gt;

&lt;p&gt;Mixer is highly scaled so it is generally resistant to individual instance failures. However, Mixer is still susceptible to cascading
failures in the case when a poison configuration is deployed which causes all Mixer instances to crash basically at the same time
(yeah, that would be a bad day). To prevent this from happening, configuration changes can be canaried to a small set of Mixer instances,
and then more broadly rolled out.&lt;/p&gt;

&lt;p&gt;Mixer doesn’t yet do canarying of configuration changes, but we expect this to come online as part of Istio’s ongoing work on reliable
configuration distribution.&lt;/p&gt;

&lt;h3 id=&#34;cache-tuning&#34;&gt;Cache tuning&lt;/h3&gt;

&lt;p&gt;We have yet to fine-tune the sizes of the sidecar and Mixer caches. This work will focus on achieving the highest performance possible using the least amount of resources.&lt;/p&gt;

&lt;h3 id=&#34;cache-sharing&#34;&gt;Cache sharing&lt;/h3&gt;

&lt;p&gt;At the moment, each Mixer instance operates independently of all other instances. A request handled by one Mixer instance will not leverage data cached in a different instance. We will eventually experiment with a distributed cache such as memcached or Redis in order to provide a much larger mesh-wide shared cache, and further reduce the number of calls to infrastructure backends.&lt;/p&gt;

&lt;h3 id=&#34;sharding&#34;&gt;Sharding&lt;/h3&gt;

&lt;p&gt;In very large meshes, the load on Mixer can be great. There can be a large number of Mixer instances, each straining to keep caches primed to
satisfy incoming traffic. We expect to eventually introduce intelligent sharding such that Mixer instances become slightly specialized in
handling particular data streams in order to increase the likelihood of cache hits. In other words, sharding helps improve cache
efficiency by routing related traffic to the same Mixer instance over time, rather than randomly dispatching to
any available Mixer instance.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Practical experience at Google showed that the model of a slim sidecar proxy and a large shared caching control plane intermediary hits a sweet
spot, delivering excellent perceived availability and latency. We’ve taken the lessons learned there and applied them to create more sophisticated and
effective caching, prefetching, and buffering strategies in Istio. We’ve also optimized the communication protocols to reduce overhead when a cache miss does occur.&lt;/p&gt;

&lt;p&gt;Mixer is still young. As of Istio 0.3, we haven’t really done significant performance work within Mixer itself. This means when a request misses the sidecar
cache, we spend more time in Mixer to respond to requests than we should. We’re doing a lot of work to improve this in coming months to reduce the overhead
that Mixer imparts in the synchronous precondition check case.&lt;/p&gt;

&lt;p&gt;We hope this post makes you appreciate the inherent benefits that Mixer brings to Istio.
Don’t hesitate to post comments or questions to &lt;a href=&#34;https://groups.google.com/forum/#!forum/istio-policies-and-telemetry&#34;&gt;istio-policies-and-telemetry@&lt;/a&gt;.&lt;/p&gt;
</description>
          <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/mixer-spof-myth/</link>
          <author>Martin Taillefer</author>
          <guid isPermaLink="true">/en/blog/2017/mixer-spof-myth/</guid>

          
              <category>adapters</category>
          
              <category>mixer</category>
          
              <category>policies</category>
          
              <category>telemetry</category>
          
              <category>availability</category>
          
              <category>latency</category>
          
        </item>
      
    
      
        <item>
          <title>Mixer Adapter Model</title>
          <description>

&lt;p&gt;Istio 0.2 introduced a new Mixer adapter model which is intended to increase Mixer’s flexibility to address a varied set of infrastructure backends. This post intends to put the adapter model in context and explain how it works.&lt;/p&gt;

&lt;h2 id=&#34;why-adapters&#34;&gt;Why adapters?&lt;/h2&gt;

&lt;p&gt;Infrastructure backends provide support functionality used to build services. They include such things as access control systems, telemetry capturing systems, quota enforcement systems, billing systems, and so forth. Services traditionally directly integrate with these backend systems, creating a hard coupling and baking-in specific semantics and usage options.&lt;/p&gt;

&lt;p&gt;Mixer serves as an abstraction layer between Istio and an open-ended set of infrastructure backends. The Istio components and services that run within the mesh can interact with these backends, while not being coupled to the backends’ specific interfaces.&lt;/p&gt;

&lt;p&gt;In addition to insulating application-level code from the details of infrastructure backends, Mixer provides an intermediation model that allows operators to inject and control policies between application code and backends. Operators can control which data is reported to which backend, which backend to consult for authorization, and much more.&lt;/p&gt;

&lt;p&gt;Given that individual infrastructure backends each have different interfaces and operational models, Mixer needs custom
code to deal with each and we call these custom bundles of code &lt;a href=&#34;https://github.com/istio/istio/wiki/Mixer-Compiled-In-Adapter-Dev-Guide&#34;&gt;&lt;em&gt;adapters&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adapters are Go packages that are directly linked into the Mixer binary. It’s fairly simple to create custom Mixer binaries linked with specialized sets of adapters, in case the default set of adapters is not sufficient for specific use cases.&lt;/p&gt;

&lt;h2 id=&#34;philosophy&#34;&gt;Philosophy&lt;/h2&gt;

&lt;p&gt;Mixer is essentially an attribute processing and routing machine. The proxy sends it &lt;a href=&#34;/docs/concepts/policies-and-telemetry/#attributes&#34;&gt;attributes&lt;/a&gt; as part of doing precondition checks and telemetry reports, which it turns into a series of calls into adapters. The operator supplies configuration which describes how to map incoming attributes to inputs for the adapters.&lt;/p&gt;





















&lt;figure style=&#34;width: 60%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 42.60%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/docs/concepts/policies-and-telemetry/machine.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/docs/concepts/policies-and-telemetry/machine.svg&#34; alt=&#34;Attribute Machine&#34; title=&#34;Attribute Machine&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Attribute Machine&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Configuration is a complex task. In fact, evidence shows that the overwhelming majority of service outages are caused by configuration errors. To help combat this, Mixer’s configuration model enforces a number of constraints designed to avoid errors. For example, the configuration model uses strong typing to ensure that only meaningful attributes or attribute expressions are used in any given context.&lt;/p&gt;

&lt;h2 id=&#34;handlers-configuring-adapters&#34;&gt;Handlers: configuring adapters&lt;/h2&gt;

&lt;p&gt;Each adapter that Mixer uses requires some configuration to operate. Typically, adapters need things like the URL to their backend, credentials, caching options, and so forth. Each adapter defines the exact configuration data it needs via a &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&lt;/a&gt; message.&lt;/p&gt;

&lt;p&gt;You configure each adapter by creating &lt;a href=&#34;/docs/concepts/policies-and-telemetry/#handlers&#34;&gt;&lt;em&gt;handlers&lt;/em&gt;&lt;/a&gt; for them. A handler is a
configuration resource which represents a fully configured adapter ready for use. There can be any number of handlers for a single adapter, making it possible to reuse an adapter in different scenarios.&lt;/p&gt;

&lt;h2 id=&#34;templates-adapter-input-schema&#34;&gt;Templates: adapter input schema&lt;/h2&gt;

&lt;p&gt;Mixer is typically invoked twice for every incoming request to a mesh service, once for precondition checks and once for telemetry reporting. For every such call, Mixer invokes one or more adapters. Different adapters need different pieces of data as input in order to do their work. A logging adapter needs a log entry, a metric adapter needs a metric, an authorization adapter needs credentials, etc.
Mixer &lt;a href=&#34;/docs/reference/config/policy-and-telemetry/templates/&#34;&gt;&lt;em&gt;templates&lt;/em&gt;&lt;/a&gt; are used to describe the exact data that an adapter consumes at request time.&lt;/p&gt;

&lt;p&gt;Each template is specified as a &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&lt;/a&gt; message. A single template describes a bundle of data that is delivered to one or more adapters at runtime. Any given adapter can be designed to support any number of templates, the specific templates the adapter supports is determined by the adapter developer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/config/policy-and-telemetry/templates/metric/&#34;&gt;&lt;code&gt;metric&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/docs/reference/config/policy-and-telemetry/templates/logentry/&#34;&gt;&lt;code&gt;logentry&lt;/code&gt;&lt;/a&gt; are two of the most essential templates used within Istio. They represent respectively the payload to report a single metric and a single log entry to appropriate backends.&lt;/p&gt;

&lt;h2 id=&#34;instances-attribute-mapping&#34;&gt;Instances: attribute mapping&lt;/h2&gt;

&lt;p&gt;You control which data is delivered to individual adapters by creating
&lt;a href=&#34;/docs/concepts/policies-and-telemetry/#instances&#34;&gt;&lt;em&gt;instances&lt;/em&gt;&lt;/a&gt;.
Instances control how Mixer uses the &lt;a href=&#34;/docs/concepts/policies-and-telemetry/#attributes&#34;&gt;attributes&lt;/a&gt; delivered
by the proxy into individual bundles of data that can be routed to different adapters.&lt;/p&gt;

&lt;p&gt;Creating instances generally requires using &lt;a href=&#34;/docs/concepts/policies-and-telemetry/#attribute-expressions&#34;&gt;attribute expressions&lt;/a&gt;. The point of these expressions is to use any attribute or literal value in order to produce a result that can be assigned to an instance’s field.&lt;/p&gt;

&lt;p&gt;Every instance field has a type, as defined in the template, every attribute has a
&lt;a href=&#34;https://github.com/istio/api/blob/master/policy/v1beta1/value_type.proto&#34;&gt;type&lt;/a&gt;, and every attribute expression has a type.
You can only assign type-compatible expressions to any given instance fields. For example, you can’t assign an integer expression
to a string field.  This kind of strong typing is designed to minimize the risk of creating bogus configurations.&lt;/p&gt;

&lt;h2 id=&#34;rules-delivering-data-to-adapters&#34;&gt;Rules: delivering data to adapters&lt;/h2&gt;

&lt;p&gt;The last piece to the puzzle is telling Mixer which instances to send to which handler and when. This is done by
creating &lt;a href=&#34;/docs/concepts/policies-and-telemetry/#rules&#34;&gt;&lt;em&gt;rules&lt;/em&gt;&lt;/a&gt;. Each rule identifies a specific handler and the set of
instances to send to that handler. Whenever Mixer processes an incoming call, it invokes the indicated handler and gives it the specific set of instances for processing.&lt;/p&gt;

&lt;p&gt;Rules contain matching predicates. A predicate is an attribute expression which returns a true/false value. A rule only takes effect if its predicate expression returns true. Otherwise, it’s like the rule didn’t exist and the indicated handler isn’t invoked.&lt;/p&gt;

&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;

&lt;p&gt;We are working to improve the end to end experience of using and developing adapters. For example, several new features are planned to make templates more expressive. Additionally, the expression language is being substantially enhanced to be more powerful and well-rounded.&lt;/p&gt;

&lt;p&gt;Longer term, we are evaluating ways to support adapters which aren’t directly linked into the main Mixer binary. This would simplify deployment and composition.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The refreshed Mixer adapter model is designed to provide a flexible framework to support an open-ended set of infrastructure backends.&lt;/p&gt;

&lt;p&gt;Handlers provide configuration data for individual adapters, templates determine exactly what kind of data different adapters want to consume at runtime, instances let operators prepare this data, rules direct the data to one or more handlers.&lt;/p&gt;

&lt;p&gt;You can learn more about Mixer&amp;rsquo;s overall architecture &lt;a href=&#34;/docs/concepts/policies-and-telemetry/&#34;&gt;here&lt;/a&gt;, and learn the specifics of templates, handlers,
and rules &lt;a href=&#34;/docs/reference/config/policy-and-telemetry&#34;&gt;here&lt;/a&gt;. You can find many examples of Mixer configuration resources in the Bookinfo sample
&lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/bookinfo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
          <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/adapter-model/</link>
          <author>Martin Taillefer</author>
          <guid isPermaLink="true">/en/blog/2017/adapter-model/</guid>

          
              <category>adapters</category>
          
              <category>mixer</category>
          
              <category>policies</category>
          
              <category>telemetry</category>
          
        </item>
      
    
      
        <item>
          <title>Announcing Istio 0.2</title>
          <description>

&lt;p&gt;We launched Istio; an open platform to connect, manage, monitor, and secure microservices, on May 24, 2017. We have been humbled by the incredible interest, and
rapid community growth of developers, operators, and partners. Our 0.1 release was focused on showing all the concepts of Istio in Kubernetes.&lt;/p&gt;

&lt;p&gt;Today we are happy to announce the 0.2 release which improves stability and performance, allows for cluster wide deployment and automated injection of sidecars in Kubernetes, adds policy and authentication for TCP services, and enables expansion of the mesh to include services deployed in virtual machines. In addition, Istio can now run outside Kubernetes, leveraging Consul/Nomad or Eureka. Beyond core features, Istio is now ready for extensions to be written by third party companies and developers.&lt;/p&gt;

&lt;h2 id=&#34;highlights-for-the-0-2-release&#34;&gt;Highlights for the 0.2 release&lt;/h2&gt;

&lt;h3 id=&#34;usability-improvements&#34;&gt;Usability improvements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Multiple namespace support&lt;/em&gt;: Istio now works cluster-wide, across multiple namespaces and this was one of the top requests from community from 0.1 release.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Policy and security for TCP services&lt;/em&gt;: In addition to HTTP, we have added transparent mutual TLS authentication and policy enforcement for TCP services as well. This will allow you to secure more of your
Kubernetes deployment, and get Istio features like telemetry, policy and security.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Automated sidecar injection&lt;/em&gt;: By leveraging the alpha &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/&#34;&gt;initializer&lt;/a&gt; feature provided by Kubernetes 1.7, envoy sidecars can now be automatically injected into application deployments when your cluster has the initializer enabled.  This enables you to deploy microservices using &lt;code&gt;kubectl&lt;/code&gt;, the exact same command that you normally use for deploying the microservices without Istio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Extending Istio&lt;/em&gt;: An improved Mixer design that lets vendors write Mixer adapters to implement support for their own systems, such as application
management or policy enforcement. The
&lt;a href=&#34;https://github.com/istio/istio/wiki/Mixer-Compiled-In-Adapter-Dev-Guide&#34;&gt;Mixer Adapter Developer&amp;rsquo;s Guide&lt;/a&gt; can help
you easily integrate your solution with Istio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Bring your own CA certificates&lt;/em&gt;: Allows users to provide their own key and certificate for Istio CA and persistent CA key/certificate Storage. Enables storing signing key/certificates in persistent storage to facilitate CA restarts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Improved routing &amp;amp; metrics&lt;/em&gt;: Support for WebSocket, MongoDB and Redis  protocols. You can apply resilience features like circuit breakers on traffic to third party services. In addition to Mixer’s metrics, hundreds of metrics from Envoy are now visible inside Prometheus for all traffic entering, leaving and within Istio mesh.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cross-environment-support&#34;&gt;Cross environment support&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Mesh expansion&lt;/em&gt;: Istio mesh can now span services running outside of Kubernetes - like those running in virtual machines while enjoying benefits such as automatic mutual TLS authentication, traffic management, telemetry, and policy enforcement across the mesh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Running outside Kubernetes&lt;/em&gt;: We know many customers use other service registry and orchestration solutions like &lt;a href=&#34;/docs/setup/consul/quick-start/&#34;&gt;Consul/Nomad&lt;/a&gt; and Eureka. Istio Pilot can now run standalone outside Kubernetes, consuming information from these systems, and manage the Envoy fleet in VMs or containers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;get-involved-in-shaping-the-future-of-istio&#34;&gt;Get involved in shaping the future of Istio&lt;/h2&gt;

&lt;p&gt;We have a growing &lt;a href=&#34;/about/feature-stages/&#34;&gt;roadmap&lt;/a&gt; ahead of us, full of great features to implement. Our focus next release is going to be on stability, reliability, integration with third party tools and multicluster use cases.&lt;/p&gt;

&lt;p&gt;To learn how to get involved and contribute to Istio&amp;rsquo;s future, check out our &lt;a href=&#34;https://github.com/istio/community&#34;&gt;community&lt;/a&gt; GitHub repository which
will introduce you to our working groups, our mailing lists, our various community meetings, our general procedures and our guidelines.&lt;/p&gt;

&lt;p&gt;We want to thank our fantastic community for field testing new versions, filing bug reports, contributing code, helping out other community members, and shaping Istio by participating in countless productive discussions. This has enabled the project to accrue 3000 stars on GitHub since launch and hundreds of active community members on Istio mailing lists.&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;
</description>
          <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/0.2-announcement/</link>
          <author>The Istio Team</author>
          <guid isPermaLink="true">/en/blog/2017/0.2-announcement/</guid>

          
        </item>
      
    
      
        <item>
          <title>Using Network Policy with Istio</title>
          <description>

&lt;p&gt;The use of Network Policy to secure applications running on Kubernetes is a now a widely accepted industry best practice.  Given that Istio also supports policy, we want to spend some time explaining how Istio policy and Kubernetes Network Policy interact and support each other to deliver your application securely.&lt;/p&gt;

&lt;p&gt;Let’s start with the basics: why might you want to use both Istio and Kubernetes Network Policy? The short answer is that they are good at different things. Consider the main differences between Istio and Network Policy (we will describe &amp;ldquo;typical” implementations, e.g. Calico, but implementation details can vary with different network providers):&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Istio Policy&lt;/th&gt;
&lt;th&gt;Network Policy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Layer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Service&amp;rdquo; &amp;mdash; L7&lt;/td&gt;
&lt;td&gt;&amp;ldquo;Network&amp;rdquo; &amp;mdash; L3-4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User space&lt;/td&gt;
&lt;td&gt;Kernel&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Enforcement Point&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;layer&#34;&gt;Layer&lt;/h2&gt;

&lt;p&gt;Istio policy operates at the &amp;ldquo;service” layer of your network application. This is Layer 7 (Application) from the perspective of the OSI model, but the de facto model of cloud native applications is that Layer 7 actually consists of at least two layers: a service layer and a content layer. The service layer is typically HTTP, which encapsulates the actual application data (the content layer). It is at this service layer of HTTP that the Istio’s Envoy proxy operates. In contrast, Network Policy operates at Layers 3 (Network) and 4 (Transport) in the OSI model.&lt;/p&gt;

&lt;p&gt;Operating at the service layer gives the Envoy proxy a rich set of attributes to base policy decisions on, for protocols it understands, which at present includes HTTP/1.1 &amp;amp; HTTP/2 (gRPC operates over HTTP/2). So, you can apply policy based on virtual host, URL, or other HTTP headers.  In the future, Istio will support a wide range of Layer 7 protocols, as well as generic TCP and UDP transport.&lt;/p&gt;

&lt;p&gt;In contrast, operating at the network layer has the advantage of being universal, since all network applications use IP. At the network layer you can apply policy regardless of the layer 7 protocol: DNS, SQL databases, real-time streaming, and a plethora of other services that do not use HTTP can be secured. Network Policy isn’t limited to a classic firewall’s tuple of IP addresses, proto, and ports. Both Istio and Network Policy are aware of rich Kubernetes labels to describe pod endpoints.&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The Istio’s proxy is based on &lt;a href=&#34;https://envoyproxy.github.io/envoy/&#34;&gt;Envoy&lt;/a&gt;, which is implemented as a user space daemon in the data plane that
interacts with  the network layer using standard sockets. This gives it a large amount of flexibility in processing, and allows it to be
distributed (and upgraded!) in a container.&lt;/p&gt;

&lt;p&gt;Network Policy data plane is typically implemented in kernel space (e.g. using iptables, eBPF filters, or even custom kernel modules). Being in kernel space
allows them to be extremely fast, but not as flexible as the Envoy proxy.&lt;/p&gt;

&lt;h2 id=&#34;enforcement-point&#34;&gt;Enforcement Point&lt;/h2&gt;

&lt;p&gt;Policy enforcement using the Envoy proxy is implemented inside the pod, as a sidecar container in the same network namespace. This allows a simple deployment model. Some containers are given permission to reconfigure the networking inside their pod (CAP_NET_ADMIN).  If such a service instance is compromised, or misbehaves (as in a malicious tenant) the proxy can be bypassed.&lt;/p&gt;

&lt;p&gt;While this won’t let an attacker access other Istio-enabled pods, so long as they are correctly configured, it opens several attack vectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attacking unprotected pods&lt;/li&gt;
&lt;li&gt;Attempting to deny service to protected pods by sending lots of traffic&lt;/li&gt;
&lt;li&gt;Exfiltrating data collected in the pod&lt;/li&gt;
&lt;li&gt;Attacking the cluster infrastructure (servers or Kubernetes services)&lt;/li&gt;
&lt;li&gt;Attacking services outside the mesh, like databases, storage arrays, or legacy systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Network Policy is typically enforced at the host node, outside the network namespace of the guest pods. This means that compromised or misbehaving pods must break into the root namespace to avoid enforcement. With the addition of egress policy due in Kubernetes 1.8, this difference makes Network Policy a key part of protecting your infrastructure from compromised workloads.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Let’s walk through a few examples of what you might want to do with Kubernetes Network Policy for an Istio-enabled application.  Consider the Bookinfo sample application.  We’re going to cover the following use cases for Network Policy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce attack surface of the application ingress&lt;/li&gt;
&lt;li&gt;Enforce fine-grained isolation within the application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reduce-attack-surface-of-the-application-ingress&#34;&gt;Reduce attack surface of the application ingress&lt;/h3&gt;

&lt;p&gt;Our application ingress controller is the main entry-point to our application from the outside world.  A quick peek at &lt;code&gt;istio.yaml&lt;/code&gt; (used to install Istio) defines the Istio ingress like this:&lt;/p&gt;





























































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: v1
kind: Service
metadata:
  name: istio-ingress
  labels:
    istio: ingress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: http
  - port: 443
    name: https
  selector:
    istio: ingress&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The istio-ingress exposes ports 80 and 443.  Let’s limit incoming traffic to just these two ports.  Envoy has a &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/operations/admin.html#operations-admin-interface&#34;&gt;built-in administrative interface&lt;/a&gt;, and we don’t want a misconfigured istio-ingress image to accidentally expose our admin interface to the outside world.  This is an example of defense in depth: a properly configured image should not expose the interface, and a properly configured Network Policy will prevent anyone from connecting to it.  Either can fail or be misconfigured and we are still protected.&lt;/p&gt;





























































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: istio-ingress-lockdown
  namespace: default
spec:
  podSelector:
    matchLabels:
      istio: ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443&lt;/code&gt;&lt;/pre&gt;







&lt;h3 id=&#34;enforce-fine-grained-isolation-within-the-application&#34;&gt;Enforce fine-grained isolation within the application&lt;/h3&gt;

&lt;p&gt;Here is the service graph for the Bookinfo application.&lt;/p&gt;





















&lt;figure style=&#34;width: 80%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 59.08%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/docs/examples/bookinfo/withistio.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/docs/examples/bookinfo/withistio.svg&#34; alt=&#34;Bookinfo Service Graph&#34; title=&#34;Bookinfo Service Graph&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Bookinfo Service Graph&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;This graph shows every connection that a correctly functioning application should be allowed to make.  All other connections, say from the Istio Ingress directly to the Rating service, are not part of the application.  Let’s lock out those extraneous connections so they cannot be used by an attacker.  Imagine, for example, that the Ingress pod is compromised by an exploit that allows an attacker to run arbitrary code.  If we only allow connections to the Product Page pods using Network Policy, the attacker has gained no more access to my application backends &lt;em&gt;even though they have compromised a member of the service mesh&lt;/em&gt;.&lt;/p&gt;







































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: product-page-ingress
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: productpage
  ingress:
  - ports:
    - protocol: TCP
      port: 9080
    from:
    - podSelector:
        matchLabels:
          istio: ingress&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;You can and should write a similar policy for each service to enforce which other pods are allowed to access each.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Our take is that Istio and Network Policy have different strengths in applying policy. Istio is application-protocol aware and highly flexible, making it ideal for applying policy in support of operational goals, like service routing, retries, circuit-breaking, etc, and for security that operates at the application layer, such as token validation. Network Policy is universal, highly efficient, and isolated from the pods, making it ideal for applying policy in support of network security goals. Furthermore, having policy that operates at different layers of the network stack is a really good thing as it gives each layer specific context without commingling of state and allows separation of responsibility.&lt;/p&gt;

&lt;p&gt;This post is based on the three part blog series by Spike Curtis, one of the Istio team members at Tigera.  The full series can be found here: &lt;a href=&#34;https://www.projectcalico.org/using-network-policy-in-concert-with-istio/&#34;&gt;https://www.projectcalico.org/using-network-policy-in-concert-with-istio/&lt;/a&gt;&lt;/p&gt;
</description>
          <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/0.1-using-network-policy/</link>
          <author>Spike Curtis</author>
          <guid isPermaLink="true">/en/blog/2017/0.1-using-network-policy/</guid>

          
        </item>
      
    
      
        <item>
          <title>Canary Deployments using Istio</title>
          <description>

&lt;blockquote&gt;
&lt;p&gt;This post was updated on May 16, 2018 to use the latest version of the traffic management model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the benefits of the &lt;a href=&#34;/&#34;&gt;Istio&lt;/a&gt; project is that it provides the control needed to deploy canary services. The idea behind
canary deployment (or rollout) is to introduce a new version of a service by first testing it using a small percentage of user
traffic, and then if all goes well, increase, possibly gradually in increments, the percentage while simultaneously phasing out
the old version. If anything goes wrong along the way, we abort and rollback to the previous version. In its simplest form,
the traffic sent to the canary version is a randomly selected percentage of requests, but in more sophisticated schemes it
can be based on the region, user, or other properties of the request.&lt;/p&gt;

&lt;p&gt;Depending on your level of expertise in this area, you may wonder why Istio&amp;rsquo;s support for canary deployment is even needed, given that platforms like Kubernetes already provide a way to do &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment&#34;&gt;version rollout&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments&#34;&gt;canary deployment&lt;/a&gt;. Problem solved, right? Well, not exactly. Although doing a rollout this way works in simple cases, it’s very limited, especially in large scale cloud environments receiving lots of (and especially varying amounts of) traffic, where autoscaling is needed.&lt;/p&gt;

&lt;h2 id=&#34;canary-deployment-in-kubernetes&#34;&gt;Canary deployment in Kubernetes&lt;/h2&gt;

&lt;p&gt;As an example, let&amp;rsquo;s say we have a deployed service, &lt;strong&gt;helloworld&lt;/strong&gt; version &lt;strong&gt;v1&lt;/strong&gt;, for which we would like to test (or simply rollout) a new version, &lt;strong&gt;v2&lt;/strong&gt;. Using Kubernetes, you can rollout a new version of the &lt;strong&gt;helloworld&lt;/strong&gt; service by simply updating the image in the service’s corresponding &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployment&lt;/a&gt; and letting the &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment&#34;&gt;rollout&lt;/a&gt; happen automatically. If we take particular care to ensure that there are enough &lt;strong&gt;v1&lt;/strong&gt; replicas running when we start and &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#pausing-and-resuming-a-deployment&#34;&gt;pause&lt;/a&gt; the rollout after only one or two &lt;strong&gt;v2&lt;/strong&gt; replicas have been started, we can keep the canary’s effect on the system very small. We can then observe the effect before deciding to proceed or, if necessary, &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment&#34;&gt;rollback&lt;/a&gt;. Best of all, we can even attach a &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&#34;&gt;horizontal pod autoscaler&lt;/a&gt; to the Deployment and it will keep the replica ratios consistent if, during the rollout process, it also needs to scale replicas up or down to handle traffic load.&lt;/p&gt;

&lt;p&gt;Although fine for what it does, this approach is only useful when we have a properly tested version that we want to deploy, i.e., more of a blue/green, a.k.a. red/black, kind of upgrade than a &amp;ldquo;dip your feet in the water&amp;rdquo; kind of canary deployment. In fact, for the latter (for example, testing a canary version that may not even be ready or intended for wider exposure), the canary deployment in Kubernetes would be done using two Deployments with &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#using-labels-effectively&#34;&gt;common pod labels&lt;/a&gt;. In this case, we can’t use autoscaling anymore because it’s now being done by two independent autoscalers, one for each Deployment, so the replica ratios (percentages) may vary from the desired ratio, depending purely on load.&lt;/p&gt;

&lt;p&gt;Whether we use one deployment or two, canary management using deployment features of container orchestration platforms like Docker, Mesos/Marathon, or Kubernetes has a fundamental problem: the use of instance scaling to manage the traffic; traffic version distribution and replica deployment are not independent in these systems. All replica pods, regardless of version, are treated the same in the kube-proxy round-robin pool, so the only way to manage the amount of traffic that a particular version receives is by controlling the replica ratio. Maintaining canary traffic at small percentages requires many replicas (e.g., 1% would require a minimum of 100 replicas). Even if we ignore this problem, the deployment approach is still very limited in that it only supports the simple (random percentage) canary approach. If, instead, we wanted to limit the visibility of the canary to requests based on some specific criteria, we still need another solution.&lt;/p&gt;

&lt;h2 id=&#34;enter-istio&#34;&gt;Enter Istio&lt;/h2&gt;

&lt;p&gt;With Istio, traffic routing and replica deployment are two completely independent functions. The number of pods implementing services are free to scale up and down based on traffic load, completely orthogonal to the control of version traffic routing. This makes managing a canary version in the presence of autoscaling a much simpler problem. Autoscalers may, in fact, respond to load variations resulting from traffic routing changes, but they are nevertheless functioning independently and no differently than when loads change for other reasons.&lt;/p&gt;

&lt;p&gt;Istio’s &lt;a href=&#34;/docs/concepts/traffic-management/#rule-configuration&#34;&gt;routing rules&lt;/a&gt; also provide other important advantages; you can easily control
fine grain traffic percentages (e.g., route 1% of traffic without requiring 100 pods) and you can control traffic using other criteria (e.g., route traffic for specific users to the canary version). To illustrate, let’s look at deploying the &lt;strong&gt;helloworld&lt;/strong&gt; service and see how simple the problem becomes.&lt;/p&gt;

&lt;p&gt;We begin by defining the &lt;strong&gt;helloworld&lt;/strong&gt; Service, just like any other Kubernetes service, something like this:&lt;/p&gt;




































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;apiVersion: v1
kind: Service
metadata:
name: helloworld
labels:
  app: helloworld
spec:
  selector:
    app: helloworld
  ...&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;We then add 2 Deployments, one for each version (&lt;strong&gt;v1&lt;/strong&gt; and &lt;strong&gt;v2&lt;/strong&gt;), both of which include the service selector’s &lt;code&gt;app: helloworld&lt;/code&gt; label:&lt;/p&gt;








































































































































































&lt;pre&gt;&lt;code class=&#39;language-yaml&#39;&gt;kind: Deployment
metadata:
  name: helloworld-v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: helloworld
        version: v1
    spec:
      containers:
      - image: helloworld-v1
        ...
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-v2
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: helloworld
        version: v2
    spec:
      containers:
      - image: helloworld-v2
        ...&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;Note that this is exactly the same way we would do a &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments&#34;&gt;canary deployment&lt;/a&gt; using plain Kubernetes, but in that case we would need to adjust the number of replicas of each Deployment to control the distribution of traffic. For example, to send 10% of the traffic to the canary version (&lt;strong&gt;v2&lt;/strong&gt;), the replicas for &lt;strong&gt;v1&lt;/strong&gt; and &lt;strong&gt;v2&lt;/strong&gt; could be set to 9 and 1, respectively.&lt;/p&gt;

&lt;p&gt;However, since we are going to deploy the service in an &lt;a href=&#34;/docs/setup/&#34;&gt;Istio enabled&lt;/a&gt; cluster, all we need to do is set a routing
rule to control the traffic distribution. For example if we want to send 10% of the traffic to the canary, we could use &lt;code&gt;kubectl&lt;/code&gt;
to set a routing rule something like this:&lt;/p&gt;




























































































































































































&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloworld
spec:
  hosts:
    - helloworld
  http:
  - route:
    - destination:
        host: helloworld
        subset: v1
      weight: 90
    - destination:
        host: helloworld
        subset: v2
      weight: 10
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: helloworld
spec:
  host: helloworld
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
EOF&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;After setting this rule, Istio will ensure that only one tenth of the requests will be sent to the canary version, regardless of how many replicas of each version are running.&lt;/p&gt;

&lt;h2 id=&#34;autoscaling-the-deployments&#34;&gt;Autoscaling the deployments&lt;/h2&gt;

&lt;p&gt;Because we don’t need to maintain replica ratios anymore, we can safely add Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&#34;&gt;horizontal pod autoscalers&lt;/a&gt; to manage the replicas for both version Deployments:&lt;/p&gt;


































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl autoscale deployment helloworld-v1 --cpu-percent=50 --min=1 --max=10
deployment &amp;#34;helloworld-v1&amp;#34; autoscaled&lt;/code&gt;&lt;/pre&gt;








































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl autoscale deployment helloworld-v2 --cpu-percent=50 --min=1 --max=10
deployment &amp;#34;helloworld-v2&amp;#34; autoscaled&lt;/code&gt;&lt;/pre&gt;


















































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get hpa
NAME           REFERENCE                 TARGET  CURRENT  MINPODS  MAXPODS  AGE
Helloworld-v1  Deployment/helloworld-v1  50%     47%      1        10       17s
Helloworld-v2  Deployment/helloworld-v2  50%     40%      1        10       15s&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;If we now generate some load on the &lt;strong&gt;helloworld&lt;/strong&gt; service, we would notice that when scaling begins, the &lt;strong&gt;v1&lt;/strong&gt; autoscaler will scale up its replicas significantly higher than the &lt;strong&gt;v2&lt;/strong&gt; autoscaler will for its replicas because &lt;strong&gt;v1&lt;/strong&gt; pods are handling 90% of the load.&lt;/p&gt;















































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods | grep helloworld
helloworld-v1-3523621687-3q5wh   0/2       Pending   0          15m
helloworld-v1-3523621687-73642   2/2       Running   0          11m
helloworld-v1-3523621687-7hs31   2/2       Running   0          19m
helloworld-v1-3523621687-dt7n7   2/2       Running   0          50m
helloworld-v1-3523621687-gdhq9   2/2       Running   0          11m
helloworld-v1-3523621687-jxs4t   0/2       Pending   0          15m
helloworld-v1-3523621687-l8rjn   2/2       Running   0          19m
helloworld-v1-3523621687-wwddw   2/2       Running   0          15m
helloworld-v1-3523621687-xlt26   0/2       Pending   0          19m
helloworld-v2-4095161145-963wt   2/2       Running   0          50m&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;If we then change the routing rule to send 50% of the traffic to &lt;strong&gt;v2&lt;/strong&gt;, we should, after a short delay, notice that the &lt;strong&gt;v1&lt;/strong&gt; autoscaler will scale down the replicas of &lt;strong&gt;v1&lt;/strong&gt; while the &lt;strong&gt;v2&lt;/strong&gt; autoscaler will perform a corresponding scale up.&lt;/p&gt;




















































































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods | grep helloworld
helloworld-v1-3523621687-73642   2/2       Running   0          35m
helloworld-v1-3523621687-7hs31   2/2       Running   0          43m
helloworld-v1-3523621687-dt7n7   2/2       Running   0          1h
helloworld-v1-3523621687-gdhq9   2/2       Running   0          35m
helloworld-v1-3523621687-l8rjn   2/2       Running   0          43m
helloworld-v2-4095161145-57537   0/2       Pending   0          21m
helloworld-v2-4095161145-9322m   2/2       Running   0          21m
helloworld-v2-4095161145-963wt   2/2       Running   0          1h
helloworld-v2-4095161145-c3dpj   0/2       Pending   0          21m
helloworld-v2-4095161145-t2ccm   0/2       Pending   0          17m
helloworld-v2-4095161145-v3v9n   0/2       Pending   0          13m&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;The end result is very similar to the simple Kubernetes Deployment rollout, only now the whole process is not being orchestrated and managed in one place. Instead, we’re seeing several components doing their jobs independently, albeit in a cause and effect manner.
What&amp;rsquo;s different, however, is that if we now stop generating load, the replicas of both versions will eventually scale down to their minimum (1), regardless of what routing rule we set.&lt;/p&gt;







































&lt;pre&gt;&lt;code class=&#39;language-command&#39;&gt;$ kubectl get pods | grep helloworld
helloworld-v1-3523621687-dt7n7   2/2       Running   0          1h
helloworld-v2-4095161145-963wt   2/2       Running   0          1h&lt;/code&gt;&lt;/pre&gt;







&lt;h2 id=&#34;focused-canary-testing&#34;&gt;Focused canary testing&lt;/h2&gt;

&lt;p&gt;As mentioned above, the Istio routing rules can be used to route traffic based on specific criteria, allowing more sophisticated canary deployment scenarios. Say, for example, instead of exposing the canary to an arbitrary percentage of users, we want to try it out on internal users, maybe even just a percentage of them. The following command could be used to send 50% of traffic from users at &lt;em&gt;some-company-name.com&lt;/em&gt; to the canary version, leaving all other users unaffected:&lt;/p&gt;






























































































































































&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloworld
spec:
  hosts:
    - helloworld
  http:
  - match:
    - headers:
        cookie:
          regex: &amp;#34;^(.*?;)?(email=[^;]*@some-company-name.com)(;.*)?$&amp;#34;
    route:
    - destination:
        host: helloworld
        subset: v1
      weight: 50
    - destination:
        host: helloworld
        subset: v2
      weight: 50
  - route:
    - destination:
        host: helloworld
        subset: v1
EOF&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;As before, the autoscalers bound to the 2 version Deployments will automatically scale the replicas accordingly, but that will have no affect on the traffic distribution.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this article we’ve shown how Istio supports general scalable canary deployments, and how this differs from the basic deployment support in Kubernetes. Istio’s service mesh provides the control necessary to manage traffic distribution with complete independence from deployment scaling. This allows for a simpler, yet significantly more functional, way to do canary test and rollout.&lt;/p&gt;

&lt;p&gt;Intelligent routing in support of canary deployment is just one of the many features of Istio that will make the production deployment of large-scale microservices-based applications much simpler. Check out [istio.io]() for more information and to try it out.
The sample code used in this article can be found &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/helloworld&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
          <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/0.1-canary/</link>
          <author>Frank Budinsky</author>
          <guid isPermaLink="true">/en/blog/2017/0.1-canary/</guid>

          
              <category>traffic-management</category>
          
              <category>canary</category>
          
        </item>
      
    
      
        <item>
          <title>Using Istio to Improve End-to-End Security</title>
          <description>

&lt;p&gt;Conventional network security approaches fail to address security threats to distributed applications deployed in dynamic production environments. Today, we describe how Istio Auth enables enterprises to transform their security posture from just protecting the edge to consistently securing all inter-service communications deep within their applications. With Istio Auth, developers and operators can protect services with sensitive data against unauthorized insider access and they can achieve this without any changes to the application code!&lt;/p&gt;

&lt;p&gt;Istio Auth is the security component of the broader &lt;a href=&#34;/&#34;&gt;Istio platform&lt;/a&gt;. It incorporates the learnings of securing millions of microservice
endpoints in Google’s production environment.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Modern application architectures are increasingly based on shared services that are deployed and scaled dynamically on cloud platforms. Traditional network edge security (e.g. firewall) is too coarse-grained and allows access from unintended clients. An example of a security risk is stolen authentication tokens that can be replayed from another client. This is a major risk for companies with sensitive data that are concerned about insider threats. Other network security approaches like IP whitelists have to be statically defined, are hard to manage at scale, and are unsuitable for dynamic production environments.&lt;/p&gt;

&lt;p&gt;Thus, security administrators need a tool that enables them to consistently, and by default, secure all communication between services across diverse production environments.&lt;/p&gt;

&lt;h2 id=&#34;solution-strong-service-identity-and-authentication&#34;&gt;Solution: strong service identity and authentication&lt;/h2&gt;

&lt;p&gt;Google has, over the years, developed architecture and technology to uniformly secure millions of microservice endpoints in its production environment against
external
attacks and insider threats. Key security principles include trusting the endpoints and not the network, strong mutual authentication based on service identity and service level authorization. Istio Auth is based on the same principles.&lt;/p&gt;

&lt;p&gt;The version 0.1 release of Istio Auth runs on Kubernetes and provides the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Strong identity assertion between services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Access control to limit the identities that can access a service (and its data)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Automatic encryption of data in transit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Management of keys and certificates at scale&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Istio Auth is based on industry standards like mutual TLS and X.509. Furthermore, Google is actively contributing to an open, community-driven service security framework called &lt;a href=&#34;https://spiffe.io/&#34;&gt;SPIFFE&lt;/a&gt;. As the &lt;a href=&#34;https://spiffe.io/&#34;&gt;SPIFFE&lt;/a&gt; specifications mature, we intend for Istio Auth to become a reference implementation of the same.&lt;/p&gt;

&lt;p&gt;The diagram below provides an overview of the Istio Auth service authentication architecture on Kubernetes.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 56.25%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/0.1-auth/./istio_auth_overview.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/0.1-auth/./istio_auth_overview.svg&#34; alt=&#34;Istio Auth Overview&#34; title=&#34;Istio Auth Overview&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Istio Auth Overview&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The above diagram illustrates three key security features:&lt;/p&gt;

&lt;h3 id=&#34;strong-identity&#34;&gt;Strong identity&lt;/h3&gt;

&lt;p&gt;Istio Auth uses &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/&#34;&gt;Kubernetes service accounts&lt;/a&gt; to identify who the service runs as. The identity is used to establish trust and define service level access policies. The identity is assigned at service deployment time and encoded in the SAN (Subject Alternative Name) field of an X.509 certificate. Using a service account as the identity has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Administrators can configure who has access to a Service Account by using the &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34;&gt;RBAC&lt;/a&gt; feature introduced in Kubernetes 1.6&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Flexibility to identify a human user, a service, or a group of services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stability of the service identity for dynamically placed and auto-scaled workloads&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;communication-security&#34;&gt;Communication security&lt;/h3&gt;

&lt;p&gt;Service-to-service communication is tunneled through high performance client side and server side &lt;a href=&#34;https://envoyproxy.github.io/envoy/&#34;&gt;Envoy&lt;/a&gt; proxies. The communication between the proxies is secured using mutual TLS. The benefit of using mutual TLS is that the service identity is not expressed as a bearer token that can be stolen or replayed from another source. Istio Auth also introduces the concept of Secure Naming to protect from a server spoofing attacks - the client side proxy verifies that the authenticated server&amp;rsquo;s service account is allowed to run the named service.&lt;/p&gt;

&lt;h3 id=&#34;key-management-and-distribution&#34;&gt;Key management and distribution&lt;/h3&gt;

&lt;p&gt;Istio Auth provides a per-cluster CA (Certificate Authority) and automated key &amp;amp; certificate management. In this context, Istio Auth:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Generates a key and certificate pair for each service account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Distributes keys and certificates to the appropriate pods using &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34;&gt;Kubernetes Secrets&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rotates keys and certificates periodically.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Revokes a specific key and certificate pair when necessary (future).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram explains the end to end Istio Auth authentication workflow on Kubernetes:&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 56.25%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/0.1-auth/./istio_auth_workflow.svg&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/0.1-auth/./istio_auth_workflow.svg&#34; alt=&#34;Istio Auth Workflow&#34; title=&#34;Istio Auth Workflow&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Istio Auth Workflow&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Istio Auth is part of the broader security story for containers. Red Hat, a partner on the development of Kubernetes, has identified &lt;a href=&#34;https://www.redhat.com/en/resources/container-security-openshift-cloud-devops-whitepaper&#34;&gt;10 Layers&lt;/a&gt; of container security. Istio and Istio Auth addresses two of these layers: &amp;ldquo;Network Isolation&amp;rdquo; and &amp;ldquo;API and Service Endpoint Management&amp;rdquo;. As cluster federation evolves on Kubernetes and other platforms, our intent is for Istio to secure communications across services spanning multiple federated clusters.&lt;/p&gt;

&lt;h2 id=&#34;benefits-of-istio-auth&#34;&gt;Benefits of Istio Auth&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Defense in depth&lt;/strong&gt;: When used in conjunction with Kubernetes (or infrastructure) network policies, users achieve higher levels of confidence, knowing that pod-to-pod or service-to-service communication is secured both at network and application layers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure by default&lt;/strong&gt;: When used with Istio’s proxy and centralized policy engine, Istio Auth can be configured during deployment with minimal or no application change. Administrators and operators can thus ensure that service communications are secured by default and that they can enforce these policies consistently across diverse protocols and runtimes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strong service authentication&lt;/strong&gt;: Istio Auth secures service communication using mutual TLS to ensure that the service identity is not expressed as a bearer token that can be stolen or replayed from another source. This ensures that services with sensitive data can only be accessed from strongly authenticated and authorized clients.&lt;/p&gt;

&lt;h2 id=&#34;join-us-in-this-journey&#34;&gt;Join us in this journey&lt;/h2&gt;

&lt;p&gt;Istio Auth is the first step towards providing a full stack of capabilities to protect services with sensitive data from external attacks and insider
threats. While the initial version runs on Kubernetes, our goal is to enable Istio Auth to secure services across diverse production environments. We encourage the
community to &lt;a href=&#34;https://github.com/istio/istio/tree/master/security&#34;&gt;join us&lt;/a&gt; in making robust service security easy and ubiquitous across different application
stacks and runtime platforms.&lt;/p&gt;
</description>
          <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/0.1-auth/</link>
          <author>The Istio Team</author>
          <guid isPermaLink="true">/en/blog/2017/0.1-auth/</guid>

          
        </item>
      
    
      
        <item>
          <title>Introducing Istio</title>
          <description>

&lt;p&gt;Google, IBM, and Lyft are proud to announce the first public release of &lt;a href=&#34;/&#34;&gt;Istio&lt;/a&gt;: an open source project that provides a uniform way to connect, secure, manage and monitor microservices. Our current release is targeted at the &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; environment; we intend to add support for other environments such as virtual machines and Cloud Foundry in the coming months.
Istio adds traffic management to microservices and creates a basis for value-add capabilities like security, monitoring, routing, connectivity management and policy.  The software is built using the battle-tested &lt;a href=&#34;https://envoyproxy.github.io/envoy/&#34;&gt;Envoy&lt;/a&gt; proxy from Lyft, and gives visibility and control over traffic &lt;em&gt;without requiring any changes to application code&lt;/em&gt;. Istio gives CIOs a powerful tool to enforce security, policy and compliance requirements across the enterprise.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Writing reliable, loosely coupled, production-grade applications based on microservices can be challenging. As monolithic applications are decomposed into microservices, software teams have to worry about the challenges inherent in integrating services in distributed systems: they must account for service discovery, load balancing, fault tolerance, end-to-end monitoring, dynamic routing for feature experimentation, and perhaps most important of all, compliance and security.&lt;/p&gt;

&lt;p&gt;Inconsistent attempts at solving these challenges, cobbled together from libraries, scripts and Stack Overflow snippets leads to solutions that vary wildly across languages and runtimes, have poor observability characteristics and can often end up compromising security.&lt;/p&gt;

&lt;p&gt;One solution is to standardize implementations on a common RPC library like &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;, but this can be costly for organizations to adopt wholesale
and leaves out brownfield applications which may be practically impossible to change. Operators need a flexible toolkit to make their microservices secure, compliant, trackable and highly available, and developers need the ability to experiment with different features in production, or deploy canary releases, without impacting the system as a whole.&lt;/p&gt;

&lt;h2 id=&#34;solution-service-mesh&#34;&gt;Solution: Service Mesh&lt;/h2&gt;

&lt;p&gt;Imagine if we could transparently inject a layer of infrastructure between a service and the network that gives operators the controls they need while freeing developers from having to bake solutions to distributed system problems into their code. This uniform layer of infrastructure combined with service deployments is commonly referred to as a &lt;strong&gt;&lt;em&gt;service mesh&lt;/em&gt;&lt;/strong&gt;. Just as microservices help to decouple feature teams from each other, a service mesh helps to decouple operators from application feature development and release processes. Istio turns disparate microservices into an integrated service mesh by systemically injecting a proxy into the network paths among them.&lt;/p&gt;

&lt;p&gt;Google, IBM and Lyft joined forces to create Istio from a desire to provide a reliable substrate for microservice development and maintenance, based on our common experiences building and operating massive scale microservices for internal and enterprise customers. Google and IBM have extensive experience with these large scale microservices in their own applications and with their enterprise customers in sensitive/regulated environments, while Lyft developed Envoy to address their internal operability challenges. &lt;a href=&#34;https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191&#34;&gt;Lyft open sourced Envoy&lt;/a&gt; after successfully using it in production for over a year to manage more than 100 services spanning 10,000 VMs, processing 2M requests/second.&lt;/p&gt;

&lt;h2 id=&#34;benefits-of-istio&#34;&gt;Benefits of Istio&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fleet-wide Visibility&lt;/strong&gt;: Failures happen, and operators need tools to stay on top of the health of clusters and their graphs of microservices. Istio produces detailed monitoring data about application and network behaviors that is rendered using &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;Grafana&lt;/a&gt;, and can be easily extended to send metrics and logs to any collection, aggregation and querying system. Istio enables analysis of performance hotspots and diagnosis of distributed failure modes with &lt;a href=&#34;https://github.com/openzipkin/zipkin&#34;&gt;Zipkin&lt;/a&gt; tracing.&lt;/p&gt;



















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 55.42%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/0.1-announcement/./istio_grafana_dashboard-new.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/0.1-announcement/./istio_grafana_dashboard-new.png&#34; alt=&#34;Grafana Dashboard with Response Size&#34; title=&#34;Grafana Dashboard with Response Size&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Grafana Dashboard with Response Size&lt;/figcaption&gt;
&lt;/figure&gt;




















    
    
        
        
            
        
    



&lt;figure style=&#34;width: 100%&#34;&gt;
    &lt;div class=&#34;wrapper-with-intrinsic-ratio&#34; style=&#34;padding-bottom: 29.91%&#34;&gt;
        &lt;a class=&#34;not-for-endnotes&#34; href=&#34;/blog/2017/0.1-announcement/./istio_zipkin_dashboard.png&#34;&gt;
            &lt;img class=&#34;element-to-stretch&#34; src=&#34;/blog/2017/0.1-announcement/./istio_zipkin_dashboard.png&#34; alt=&#34;Zipkin Dashboard&#34; title=&#34;Zipkin Dashboard&#34; /&gt;
        &lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Zipkin Dashboard&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Resiliency and efficiency&lt;/strong&gt;: When developing microservices, operators need to assume that the network will be unreliable. Operators can use retries, load balancing, flow-control (HTTP/2), and circuit-breaking to compensate for some of the common failure modes due to an unreliable network. Istio provides a uniform approach to configuring these features, making it easier to operate a highly resilient service mesh.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer productivity&lt;/strong&gt;: Istio provides a significant boost to developer productivity by letting them focus on building service features in their language of choice, while Istio handles resiliency and networking challenges in a uniform way. Developers are freed from having to bake solutions to distributed systems problems into their code. Istio further improves productivity by providing common functionality supporting A/B testing, canarying, and fault injection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Policy Driven Ops&lt;/strong&gt;: Istio empowers teams with different areas of concern to operate independently. It decouples cluster operators from the feature development cycle, allowing improvements to security, monitoring, scaling, and service topology to be rolled out &lt;em&gt;without&lt;/em&gt; code changes. Operators can route a precise subset of production traffic to qualify a new service release. They can inject failures or delays into traffic to test the resilience of the service mesh, and set up rate limits to prevent services from being overloaded. Istio can also be used to enforce compliance rules, defining ACLs between services to allow only authorized services to talk to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure by default&lt;/strong&gt;: It is a common fallacy of distributed computing that the network is secure. Istio enables operators to authenticate and secure all communication between services using a mutual TLS connection, without burdening the developer or the operator with cumbersome certificate management tasks. Our security framework is aligned with the emerging &lt;a href=&#34;https://spiffe.github.io/&#34;&gt;SPIFFE&lt;/a&gt; specification, and is based on similar systems that have been tested extensively inside Google.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incremental Adoption&lt;/strong&gt;: We designed Istio to be completely transparent to the services running in the mesh, allowing teams to incrementally adopt features of Istio over time. Adopters can start with enabling fleet-wide visibility and once they’re comfortable with Istio in their environment they can switch on other features as needed.&lt;/p&gt;

&lt;h2 id=&#34;join-us-in-this-journey&#34;&gt;Join us in this journey&lt;/h2&gt;

&lt;p&gt;Istio is a completely open development project. Today we are releasing version 0.1, which works in a Kubernetes cluster, and we plan to have major new
releases every 3 months, including support for additional environments. Our goal is to enable developers and operators to rollout and operate microservices
with agility, complete visibility of the underlying network, and uniform control and security in all environments. We look forward to working with the Istio
community and our partners towards these goals, following our &lt;a href=&#34;/about/feature-stages/&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&#34;https://github.com/istio/istio/releases&#34;&gt;here&lt;/a&gt; to get the latest released bits.&lt;/p&gt;

&lt;p&gt;View the &lt;a href=&#34;/talks/istio_talk_gluecon_2017.pdf&#34;&gt;presentation&lt;/a&gt; from GlueCon 2017, where Istio was unveiled.&lt;/p&gt;

&lt;h2 id=&#34;community&#34;&gt;Community&lt;/h2&gt;

&lt;p&gt;We are excited to see early commitment to support the project from many companies in the community:
&lt;a href=&#34;https://blog.openshift.com/red-hat-istio-launch/&#34;&gt;Red Hat&lt;/a&gt; with Red Hat OpenShift and OpenShift Application Runtimes,
Pivotal with &lt;a href=&#34;https://content.pivotal.io/blog/pivotal-and-istio-advancing-the-ecosystem-for-microservices-in-the-enterprise&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt;,
WeaveWorks with &lt;a href=&#34;https://www.weave.works/blog/istio-weave-cloud/&#34;&gt;Weave Cloud&lt;/a&gt; and Weave Net 2.0,
&lt;a href=&#34;https://www.projectcalico.org/welcoming-istio-to-the-kubernetes-networking-community&#34;&gt;Tigera&lt;/a&gt; with the Project Calico Network Policy Engine
and &lt;a href=&#34;https://www.datawire.io/istio-and-datawire-ecosystem/&#34;&gt;Datawire&lt;/a&gt; with the Ambassador project. We hope to see many more companies join us in
this journey.&lt;/p&gt;

&lt;p&gt;To get involved, connect with us via any of these channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[istio.io]() for documentation and examples.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;a href=&#34;https://groups.google.com/forum/#!forum/istio-users&#34;&gt;istio-users@googlegroups.com&lt;/a&gt; mailing list for general discussions,
or &lt;a href=&#34;https://groups.google.com/forum/#!forum/istio-announce&#34;&gt;istio-announce@googlegroups.com&lt;/a&gt; for key announcements regarding the project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/istio&#34;&gt;Stack Overflow&lt;/a&gt; for curated questions and answers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/istio/istio/issues&#34;&gt;GitHub&lt;/a&gt; for filing issues&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/IstioMesh&#34;&gt;@IstioMesh&lt;/a&gt; on Twitter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From everyone working on Istio, welcome aboard!&lt;/p&gt;
</description>
          <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
          <link>/en/blog/2017/0.1-announcement/</link>
          <author>The Istio Team</author>
          <guid isPermaLink="true">/en/blog/2017/0.1-announcement/</guid>

          
        </item>
      
    
      
    
      
    
      
    
  </channel>
</rss>
